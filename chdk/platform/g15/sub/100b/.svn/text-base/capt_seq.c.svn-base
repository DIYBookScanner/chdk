/*
 * capt_seq.c - auto-generated by CHDK code_gen.
 */
#include "lolevel.h"
#include "platform.h"
#include "core.h"

#define USE_STUBS_NRFLAG 1          // see stubs_entry.S
#define NR_AUTO (0)                 // have to explictly reset value back to 0 to enable auto
#define PAUSE_FOR_FILE_COUNTER 300  // Enable delay in capt_seq_hook_raw_here to ensure file counter is updated

#include "../../../generic/capt_seq.c"

/*************************************************************/
//** capt_seq_task @ 0xFF0856D8 - 0xFF0859EC, length=198
void __attribute__((naked,noinline)) capt_seq_task() {
asm volatile (
"    STMFD   SP!, {R3-R7,LR} \n"
"    LDR     R4, =0x43964 \n"
"    LDR     R7, =0x3888 \n"
"    MOV     R6, #0 \n"

"loc_FF0856E8:\n"
"    LDR     R0, [R7, #4] \n"
"    MOV     R2, #0 \n"
"    MOV     R1, SP \n"
"    BL      sub_0068BDE0 /*_ReceiveMessageQueue*/ \n"
"    TST     R0, #1 \n"
"    BEQ     loc_FF085714 \n"
"    LDR     R1, =0x491 \n"
"    LDR     R0, =0xFF085024 \n"
"    BL      _DebugAssert \n"
"    BL      _ExitTask \n"
"    LDMFD   SP!, {R3-R7,PC} \n"

"loc_FF085714:\n"
"    LDR     R0, [SP] \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #0x28 \n"
"    ADDCC   PC, PC, R1, LSL#2 \n"
"    B       loc_FF0859B4 \n"
"    B       loc_FF0857C8 \n"
"    B       loc_FF0857E0 \n"
"    B       loc_FF0857EC \n"
"    B       loc_FF085800 \n"
"    B       loc_FF0857F8 \n"
"    B       loc_FF08580C \n"
"    B       loc_FF085814 \n"
"    B       loc_FF08581C \n"
"    B       loc_FF085838 \n"
"    B       loc_FF08588C \n"
"    B       loc_FF085844 \n"
"    B       loc_FF085850 \n"
"    B       loc_FF085858 \n"
"    B       loc_FF085874 \n"
"    B       loc_FF08587C \n"
"    B       loc_FF085884 \n"
"    B       loc_FF085894 \n"
"    B       loc_FF08589C \n"
"    B       loc_FF0858A4 \n"
"    B       loc_FF0858AC \n"
"    B       loc_FF0858B4 \n"
"    B       loc_FF0858BC \n"
"    B       loc_FF0858C4 \n"
"    B       loc_FF0858CC \n"
"    B       loc_FF0858D4 \n"
"    B       loc_FF0858DC \n"
"    B       loc_FF0858E8 \n"
"    B       loc_FF0858F0 \n"
"    B       loc_FF0858FC \n"
"    B       loc_FF085904 \n"
"    B       loc_FF085934 \n"
"    B       loc_FF08593C \n"
"    B       loc_FF085944 \n"
"    B       loc_FF08594C \n"
"    B       loc_FF085954 \n"
"    B       loc_FF08595C \n"
"    B       loc_FF085968 \n"
"    B       loc_FF085970 \n"
"    B       loc_FF08597C \n"
"    B       loc_FF0859C0 \n"

"loc_FF0857C8:\n"
"    BL      shooting_expo_iso_override\n"      // added
"    BL      sub_FF085FAC \n"
"    BL      shooting_expo_param_override\n"    // added
"    BL      sub_FF08282C \n"
"    MOV     R0, #0\n"                          // added
"    STR     R0, [R4,#0x28]\n"                  // added, fixes overrides  behavior at short shutter press (from S95)
//"  LDR     R0, [R4, #0x28] \n"  // above patch makes these three lines redundant
//"  CMP     R0, #0 \n"
//"  BLNE    _sub_FF1E5DE8 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0857E0:\n"
"    LDR     R0, [R0, #0x10] \n"
"    BL      sub_FF085B08_my \n"  // --> Patched. Old value = 0xFF085B08.
"    B       loc_FF0859C0 \n"

"loc_FF0857EC:\n"
"    MOV     R0, #1 \n"
"    BL      sub_FF086344 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0857F8:\n"
"    BL      sub_FF085C5C \n"
"    B       loc_FF085804 \n"

"loc_FF085800:\n"
"    BL      sub_FF085F8C \n"

"loc_FF085804:\n"
"    STR     R6, [R4, #0x28] \n"
"    B       loc_FF0859C0 \n"

"loc_FF08580C:\n"
"    BL      sub_FF085F94 \n"
"    B       loc_FF0859C0 \n"

"loc_FF085814:\n"
"    BL      sub_FF0861F0 \n"
"    B       loc_FF08583C \n"

"loc_FF08581C:\n"
"    LDR     R5, [R0, #0x10] \n"
"    MOV     R0, R5 \n"
"    BL      sub_FF1E5EB4 \n"
"    MOV     R2, R5 \n"
"    MOV     R1, #9 \n"
"    BL      sub_FF0832BC \n"
"    B       loc_FF0859C0 \n"

"loc_FF085838:\n"
"    BL      sub_FF0862AC \n"

"loc_FF08583C:\n"
"    BL      sub_FF08282C \n"
"    B       loc_FF0859C0 \n"

"loc_FF085844:\n"
"    LDR     R0, [R4, #0x58] \n"
"    BL      sub_FF086BB0 \n"
"    B       loc_FF0859C0 \n"

"loc_FF085850:\n"
"    BL      sub_FF086F48 \n"
"    B       loc_FF0859C0 \n"

"loc_FF085858:\n"
"    LDRH    R0, [R4] \n"
"    SUB     R1, R0, #0x8200 \n"
"    SUBS    R1, R1, #0x39 \n"
"    MOVNE   R0, #0 \n"
"    MOVEQ   R0, #1 \n"
"    BL      sub_FF086FAC \n"
"    B       loc_FF0859C0 \n"

"loc_FF085874:\n"
"    BL      sub_FF087194 \n"
"    B       loc_FF0859C0 \n"

"loc_FF08587C:\n"
"    BL      sub_FF087608 \n"
"    B       loc_FF0859C0 \n"

"loc_FF085884:\n"
"    BL      sub_FF0876BC \n"
"    B       loc_FF0859C0 \n"

"loc_FF08588C:\n"
"    BL      sub_FF085F8C \n"
"    B       loc_FF0859C0 \n"

"loc_FF085894:\n"
"    BL      sub_FF1E37A4 \n"
"    B       loc_FF0859C0 \n"

"loc_FF08589C:\n"
"    BL      sub_FF1E3A38 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858A4:\n"
"    BL      sub_FF1E3B08 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858AC:\n"
"    BL      sub_FF1E3BBC \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858B4:\n"
"    BL      sub_FF1E3CBC \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858BC:\n"
"    MOV     R0, #0 \n"
"    B       loc_FF0858E0 \n"

"loc_FF0858C4:\n"
"    BL      sub_FF1E42B4 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858CC:\n"
"    BL      sub_FF1E4348 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858D4:\n"
"    BL      sub_FF1E43F0 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858DC:\n"
"    MOV     R0, #1 \n"

"loc_FF0858E0:\n"
"    BL      sub_FF1E4150 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858E8:\n"
"    BL      sub_FF086590 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858F0:\n"
"    BL      sub_FF086624 \n"
"    BL      sub_FF1E7268 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0858FC:\n"
"    BL      sub_FF1E3F90 \n"
"    B       loc_FF0859C0 \n"

"loc_FF085904:\n"
"    MOV     R2, #2 \n"
"    ADD     R1, R4, #0x62 \n"
"    MOV     R0, #0x6F \n"
"    BL      _GetPropertyCase \n"
"    TST     R0, #1 \n"
"    LDRNE   R1, =0x592 \n"
"    LDRNE   R0, =0xFF085024 \n"
"    BLNE    _DebugAssert \n"
"    LDRH    R0, [R4, #0x62] \n"
"    CMP     R0, #1 \n"
"    BLEQ    sub_FF1E3F84 \n"
"    B       loc_FF0859C0 \n"

"loc_FF085934:\n"
"    BL      sub_FF1E40AC \n"
"    B       loc_FF0859C0 \n"

"loc_FF08593C:\n"
"    BL      sub_FF1E733C \n"
"    B       loc_FF0859C0 \n"

"loc_FF085944:\n"
"    BL      sub_FF01DA10 \n"
"    B       loc_FF0859C0 \n"

"loc_FF08594C:\n"
"    BL      sub_FF08B874 \n"
"    B       loc_FF0859C0 \n"

"loc_FF085954:\n"
"    BL      sub_FF08B974 \n"
"    B       loc_FF0859C0 \n"

"loc_FF08595C:\n"
"    LDR     R0, [R0, #0xC] \n"
"    BL      sub_FF1E44F8 \n"
"    B       loc_FF0859C0 \n"

"loc_FF085968:\n"
"    BL      sub_FF1E4568 \n"
"    B       loc_FF0859C0 \n"

"loc_FF085970:\n"
"    BL      sub_FF08BB00 \n"
"    BL      sub_FF08B9CC \n"
"    B       loc_FF0859C0 \n"

"loc_FF08597C:\n"
"    MOV     R0, #1 \n"
"    BL      sub_FF1E66E4 \n"
"    MOV     R0, #1 \n"
"    BL      sub_FF1E6818 \n"
"    LDRH    R0, [R4, #0xA4] \n"
"    CMP     R0, #4 \n"
"    LDRNEH  R0, [R4] \n"
"    SUBNE   R1, R0, #0x4200 \n"
"    SUBNES  R1, R1, #0x2E \n"
"    BNE     loc_FF0859C0 \n"
"    BL      sub_FF08B974 \n"
"    BL      sub_FF08C218 \n"
"    BL      sub_FF08BF20 \n"
"    B       loc_FF0859C0 \n"

"loc_FF0859B4:\n"
"    LDR     R1, =0x5F2 \n"
"    LDR     R0, =0xFF085024 \n"
"    BL      _DebugAssert \n"

"loc_FF0859C0:\n"
"    LDR     R0, [SP] \n"
"    LDR     R1, [R0, #4] \n"
"    LDR     R0, [R7] \n"
"    BL      sub_0068BB50 /*_SetEventFlag*/ \n"
"    LDR     R5, [SP] \n"
"    LDR     R0, [R5, #8] \n"
"    CMP     R0, #0 \n"
"    LDREQ   R1, =0x117 \n"
"    LDREQ   R0, =0xFF085024 \n"
"    BLEQ    _DebugAssert \n"
"    STR     R6, [R5, #8] \n"
"    B       loc_FF0856E8 \n"
);
}

/*************************************************************/
//** sub_FF085B08_my @ 0xFF085B08 - 0xFF085BA8, length=41
void __attribute__((naked,noinline)) sub_FF085B08_my() {
asm volatile (
"    STMFD   SP!, {R4-R6,LR} \n"
"    LDR     R5, =0x43964 \n"
"    MOV     R6, R0 \n"
"    LDR     R0, [R5, #0x28] \n"
"    CMP     R0, #0 \n"
"    BNE     loc_FF085B58 \n"
"    LDR     R0, [R5, #0x94] \n"
"    TST     R0, #0x30 \n"
"    BLNE    sub_FF08A164 \n"
"    BL      sub_FF089C2C \n"
"    MOV     R1, R6 \n"
"    BL      sub_FF089C84 \n"
"    LDR     R0, =0x10F \n"
"    MOV     R2, #4 \n"
"    ADD     R1, R6, #0x78 \n"
"    BL      _SetPropertyCase \n"
"    MOV     R2, #4 \n"
"    ADD     R1, R6, #0x7C \n"
"    MOV     R0, #0x2C \n"
"    BL      _SetPropertyCase \n"

"loc_FF085B58:\n"
"    LDR     R0, [R5, #0x94] \n"
"    TST     R0, #0x20 \n"
"    MOV     R0, R6 \n"
"    BEQ     loc_FF085B70 \n"
"    BL      sub_FF1E6CB0 \n"
"    B       loc_FF085B74 \n"

"loc_FF085B70:\n"
"    BL      sub_FF1E5B70_my \n"  // --> Patched. Old value = 0xFF1E5B70.
"    BL      capt_seq_hook_raw_here \n" // +++

"loc_FF085B74:\n"
"    MOV     R4, R0 \n"
"    MOV     R2, R6 \n"
"    MOV     R1, #1 \n"
"    BL      sub_FF0832BC \n"
"    TST     R4, #1 \n"
"    LDMNEFD SP!, {R4-R6,PC} \n"
"    MOV     R0, R6 \n"
"    BL      sub_FF1E4B10 \n"
"    LDR     R0, [R5, #0x94] \n"
"    TST     R0, #2 \n"
"    LDMEQFD SP!, {R4-R6,PC} \n"
"    MOV     R0, R6 \n"
"    LDMFD   SP!, {R4-R6,LR} \n"
"    B       sub_FF083464 \n"
);
}

/*************************************************************/
//** sub_FF1E5B70_my @ 0xFF1E5B70 - 0xFF1E5DE4, length=158
void __attribute__((naked,noinline)) sub_FF1E5B70_my() {
asm volatile (
"    STMFD   SP!, {R3-R7,LR} \n"
"    LDR     R6, =0x43964 \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R6, #0x28] \n"
"    LDR     R5, =0x420D \n"
"    CMP     R0, #0 \n"
"    MOV     R7, #0 \n"
"    BNE     loc_FF1E5C14 \n"
"    LDR     R1, [R6, #0x94] \n"
"    TST     R1, #6 \n"
"    BNE     loc_FF1E5BB0 \n"
"    MOV     R0, #0xC \n"
"    BL      sub_FF08DDF8 \n"
"    TST     R0, #1 \n"
"    BEQ     loc_FF1E5C14 \n"
"    B       loc_FF1E5C0C \n"

"loc_FF1E5BB0:\n"
"    LDRH    R0, [R6] \n"
"    CMP     R0, R5 \n"
"    LDRNEH  R0, [R6, #0xA2] \n"
"    CMPNE   R0, #3 \n"
"    LDRNE   R0, [R4, #8] \n"
"    CMPNE   R0, #1 \n"
"    BLS     loc_FF1E5BF4 \n"
"    LDRH    R0, [R6, #0x9E] \n"
"    CMP     R0, #3 \n"
"    BNE     loc_FF1E5BE0 \n"
"    TST     R1, #2 \n"
"    BNE     loc_FF1E5C14 \n"

"loc_FF1E5BE0:\n"
"    BL      sub_FF018804 \n"
"    TST     R0, #1 \n"
"    BEQ     loc_FF1E5C14 \n"
"    BL      sub_FF08DE60 \n"
"    B       loc_FF1E5C0C \n"

"loc_FF1E5BF4:\n"
"    MOV     R0, #0xC \n"
"    BL      sub_FF08DDF8 \n"
"    TST     R0, #1 \n"
"    BEQ     loc_FF1E5C14 \n"
"    BL      sub_FF1E6560 \n"
"    BL      sub_FF082ED8 \n"

"loc_FF1E5C0C:\n"
"    MOV     R0, #1 \n"
"    LDMFD   SP!, {R3-R7,PC} \n"

"loc_FF1E5C14:\n"
"    MOV     R0, R4 \n"
"    BL      sub_FF1E73B0 \n"
"    BL      sub_FF085F9C \n"
"    LDR     R0, [R6, #0x28] \n"
"    CMP     R0, #0 \n"
"    BNE     loc_FF1E5DD0 \n"
"    MOV     R0, R4 \n"
"    BL      sub_FF1E49F4 \n"
"    TST     R0, #1 \n"
"    LDMNEFD SP!, {R3-R7,PC} \n"
"    LDR     R0, [R6, #0x94] \n"
"    AND     R0, R0, #0x40 \n"
"    CMP     R0, #0 \n"
"    LDRNEH  R0, [R6] \n"
"    CMPNE   R0, R5 \n"
"    LDRNEH  R0, [R6, #0xA2] \n"
"    CMPNE   R0, #3 \n"
"    LDRNE   R0, [R4, #8] \n"
"    CMPNE   R0, #1 \n"
"    BLS     loc_FF1E5C80 \n"
"    BL      sub_FF1E69D8 \n"
"    MOV     R3, #0xB3 \n"
"    STR     R3, [SP] \n"
"    LDR     R2, =0x3A98 \n"
"    LDR     R3, =0xFF1E5E90 \n"
"    MOV     R1, #0x8000 \n"
"    BL      sub_FF08E070 \n"

"loc_FF1E5C80:\n"
"    LDR     R0, [R6, #0x94] \n"
"    AND     R0, R0, #4 \n"
"    CMP     R0, #0 \n"
"    LDRNEH  R0, [R6] \n"
"    CMPNE   R0, R5 \n"
"    LDRNEH  R0, [R6, #0xA2] \n"
"    CMPNE   R0, #3 \n"
"    LDRNE   R0, [R4, #8] \n"
"    CMPNE   R0, #1 \n"
"    BLS     loc_FF1E5CB4 \n"
"    LDR     R0, [R6, #0x98] \n"
"    CMP     R0, #2 \n"
"    BNE     loc_FF1E5CC0 \n"

"loc_FF1E5CB4:\n"
"    MOV     R0, R4 \n"
"    BL      sub_FF1E4F3C \n"
"    BL      sub_FF1E64A4 \n"
"    BL      wait_until_remote_button_is_released\n" // +++
"    BL      capt_seq_hook_set_nr\n" // +++

"loc_FF1E5CC0:\n"
"    LDRH    R0, [R6] \n"
"    CMP     R0, R5 \n"
"    LDRNEH  R0, [R6, #0xA2] \n"
"    CMPNE   R0, #3 \n"
"    LDRNE   R0, [R4, #8] \n"
"    CMPNE   R0, #1 \n"
"    MOVLS   R0, #4 \n"
"    BLLS    sub_FF1377FC \n"
"    LDR     R0, [R6, #0x94] \n"
"    TST     R0, #4 \n"
"    BEQ     loc_FF1E5D18 \n"
"    LDR     R0, [R6, #0x98] \n"
"    CMP     R0, #2 \n"
"    BNE     loc_FF1E5D18 \n"
"    LDRH    R0, [R6] \n"
"    CMP     R0, R5 \n"
"    LDRNEH  R0, [R6, #0xA2] \n"
"    CMPNE   R0, #3 \n"
"    LDRNE   R0, [R4, #8] \n"
"    CMPNE   R0, #1 \n"
"    MOVLS   R0, #3 \n"
"    BLLS    sub_FF1377FC \n"

"loc_FF1E5D18:\n"
"    LDR     R0, [R6, #0x94] \n"
"    TST     R0, #0x40 \n"
"    BEQ     loc_FF1E5D80 \n"
"    LDR     R0, =0x181 \n"
"    MOV     R2, #4 \n"
"    MOV     R1, SP \n"
"    BL      _GetPropertyCase \n"
"    TST     R0, #1 \n"
"    MOVNE   R1, #0xD4 \n"
"    LDRNE   R0, =0xFF1E5E90 \n"
"    BLNE    _DebugAssert \n"
"    LDR     R0, [SP] \n"
"    CMP     R0, #0 \n"
"    BNE     loc_FF1E5D60 \n"
"    BL      sub_FF1E69D8 \n"
"    MOV     R1, #0x8000 \n"
"    BL      sub_0068BB50 /*_SetEventFlag*/ \n"
"    B       loc_FF1E5D80 \n"

"loc_FF1E5D60:\n"
"    BL      sub_FF1E69D8 \n"
"    MOV     R1, #0x8000 \n"
"    BL      sub_0068BB84 /*_ClearEventFlag*/ \n"
"    LDR     R2, =0xFF1E5B5C \n"
"    LDR     R0, [SP] \n"
"    MOV     R3, #0x8000 \n"
"    MOV     R1, R2 \n"
"    BL      sub_FF020C0C /*_SetTimerAfter*/ \n"

"loc_FF1E5D80:\n"
"    LDR     R0, [R6, #0x94] \n"
"    AND     R0, R0, #6 \n"
"    CMP     R0, #0 \n"
"    LDRNEH  R0, [R6] \n"
"    CMPNE   R0, R5 \n"
"    LDRNEH  R0, [R6, #0xA2] \n"
"    CMPNE   R0, #3 \n"
"    LDRNE   R0, [R4, #8] \n"
"    CMPNE   R0, #1 \n"
"    MOVLS   R0, #2 \n"
"    BLLS    sub_FF08F674 \n"
"    LDR     R0, [R6, #0x94] \n"
"    TST     R0, #0x10 \n"
"    MOV     R0, R4 \n"
"    BEQ     loc_FF1E5DC4 \n"
"    BL      sub_FF38F4D0 \n"
"    B       loc_FF1E5DC8 \n"

"loc_FF1E5DC4:\n"
"    BL      sub_FF1E5598 \n"

"loc_FF1E5DC8:\n"
"    MOV     R7, R0 \n"
"    B       loc_FF1E5DE0 \n"

"loc_FF1E5DD0:\n"
"    LDR     R0, =0x98E8 \n"
"    LDR     R0, [R0] \n"
"    CMP     R0, #0 \n"
"    MOVNE   R7, #0x1D \n"

"loc_FF1E5DE0:\n"
"    MOV     R0, R7 \n"
"    LDMFD   SP!, {R3-R7,PC} \n"
);
}

/*************************************************************/
//** exp_drv_task @ 0xFF0CB0A4 - 0xFF0CB734, length=421
void __attribute__((naked,noinline)) exp_drv_task() {
asm volatile (
"    STMFD   SP!, {R4-R9,LR} \n"
"    SUB     SP, SP, #0x2C \n"
"    LDR     R6, =0x4DBC \n"
"    LDR     R7, =0xBB8 \n"
"    LDR     R4, =0x61A08 \n"
"    MOV     R0, #0 \n"
"    ADD     R5, SP, #0x1C \n"
"    STR     R0, [SP, #0xC] \n"

"loc_FF0CB0C4:\n"
"    LDR     R0, [R6, #0x20] \n"
"    MOV     R2, #0 \n"
"    ADD     R1, SP, #0x28 \n"
"    BL      sub_0068BDE0 /*_ReceiveMessageQueue*/ \n"
"    LDR     R0, [SP, #0xC] \n"
"    CMP     R0, #1 \n"
"    BNE     loc_FF0CB110 \n"
"    LDR     R0, [SP, #0x28] \n"
"    LDR     R0, [R0] \n"
"    CMP     R0, #0x14 \n"
"    CMPNE   R0, #0x15 \n"
"    CMPNE   R0, #0x16 \n"
"    CMPNE   R0, #0x17 \n"
"    BEQ     loc_FF0CB270 \n"
"    CMP     R0, #0x2A \n"
"    BEQ     loc_FF0CB1F8 \n"
"    ADD     R1, SP, #0xC \n"
"    MOV     R0, #0 \n"
"    BL      sub_FF0CB054 \n"

"loc_FF0CB110:\n"
"    LDR     R0, [SP, #0x28] \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #0x30 \n"
"    BNE     loc_FF0CB13C \n"
"    BL      sub_FF0CC5D8 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R1, #1 \n"
"    BL      sub_0068BB50 /*_SetEventFlag*/ \n"
"    BL      _ExitTask \n"
"    ADD     SP, SP, #0x2C \n"
"    LDMFD   SP!, {R4-R9,PC} \n"

"loc_FF0CB13C:\n"
"    CMP     R1, #0x2F \n"
"    BNE     loc_FF0CB158 \n"
"    LDR     R2, [R0, #0x8C]! \n"
"    LDR     R1, [R0, #4] \n"
"    MOV     R0, R1 \n"
"    BLX     R2 \n"
"    B       loc_FF0CB72C \n"

"loc_FF0CB158:\n"
"    CMP     R1, #0x28 \n"
"    BNE     loc_FF0CB1A8 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R1, #0x80 \n"
"    BL      sub_0068BB84 /*_ClearEventFlag*/ \n"
"    LDR     R0, =0xFF0C67A8 \n"
"    MOV     R1, #0x80 \n"
"    BL      sub_FF07C130 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R2, R7 \n"
"    MOV     R1, #0x80 \n"
"    BL      sub_0068BA90 /*_WaitForAllEventFlag*/ \n"
"    TST     R0, #1 \n"
"    LDRNE   R1, =0x1643 \n"
"    BNE     loc_FF0CB264 \n"

"loc_FF0CB194:\n"
"    LDR     R1, [SP, #0x28] \n"
"    LDR     R0, [R1, #0x90] \n"
"    LDR     R1, [R1, #0x8C] \n"
"    BLX     R1 \n"
"    B       loc_FF0CB72C \n"

"loc_FF0CB1A8:\n"
"    CMP     R1, #0x29 \n"
"    BNE     loc_FF0CB1F0 \n"
"    ADD     R1, SP, #0xC \n"
"    BL      sub_FF0CB054 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R1, #0x100 \n"
"    BL      sub_0068BB84 /*_ClearEventFlag*/ \n"
"    LDR     R0, =0xFF0C67B8 \n"
"    MOV     R1, #0x100 \n"
"    BL      sub_FF07CEE4 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R2, R7 \n"
"    MOV     R1, #0x100 \n"
"    BL      sub_0068BA90 /*_WaitForAllEventFlag*/ \n"
"    TST     R0, #1 \n"
"    BEQ     loc_FF0CB194 \n"
"    LDR     R1, =0x164D \n"
"    B       loc_FF0CB264 \n"

"loc_FF0CB1F0:\n"
"    CMP     R1, #0x2A \n"
"    BNE     loc_FF0CB208 \n"

"loc_FF0CB1F8:\n"
"    LDR     R0, [SP, #0x28] \n"
"    ADD     R1, SP, #0xC \n"
"    BL      sub_FF0CB054 \n"
"    B       loc_FF0CB194 \n"

"loc_FF0CB208:\n"
"    CMP     R1, #0x2D \n"
"    BNE     loc_FF0CB220 \n"
"    BL      sub_FF0B553C \n"
"    BL      sub_FF0B6314 \n"
"    BL      sub_FF0B5E24 \n"
"    B       loc_FF0CB194 \n"

"loc_FF0CB220:\n"
"    CMP     R1, #0x2E \n"
"    BNE     loc_FF0CB270 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R1, #4 \n"
"    BL      sub_0068BB84 /*_ClearEventFlag*/ \n"
"    LDR     R1, =0xFF0C67D8 \n"
"    LDR     R0, =0xFFFFF400 \n"
"    MOV     R2, #4 \n"
"    BL      sub_FF0B4F80 \n"
"    BL      sub_FF0B521C \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R2, R7 \n"
"    MOV     R1, #4 \n"
"    BL      sub_0068B9AC /*_WaitForAnyEventFlag*/ \n"
"    TST     R0, #1 \n"
"    BEQ     loc_FF0CB194 \n"
"    LDR     R1, =0x1675 \n"

"loc_FF0CB264:\n"
"    LDR     R0, =0xFF0C6F58 \n"
"    BL      _DebugAssert \n"
"    B       loc_FF0CB194 \n"

"loc_FF0CB270:\n"
"    LDR     R0, [SP, #0x28] \n"
"    MOV     R8, #1 \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #0x12 \n"
"    CMPNE   R1, #0x13 \n"
"    BNE     loc_FF0CB2D8 \n"
"    LDR     R1, [R0, #0x7C] \n"
"    ADD     R1, R1, R1, LSL#1 \n"
"    ADD     R1, R0, R1, LSL#2 \n"
"    SUB     R1, R1, #8 \n"
"    LDMIA   R1, {R2,R3,R9} \n"
"    STMIA   R5, {R2,R3,R9} \n"
"    BL      sub_FF0C951C \n"
"    LDR     R0, [SP, #0x28] \n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R3, [R0, #0x8C] \n"
"    LDR     R2, [R0, #0x90] \n"
"    ADD     R0, R0, #4 \n"
"    BLX     R3 \n"
"    LDR     R0, [SP, #0x28] \n"
"    BL      sub_FF0CC9E4 \n"
"    LDR     R0, [SP, #0x28] \n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R2, [R0, #0x98] \n"
"    LDR     R3, [R0, #0x94] \n"
"    B       loc_FF0CB5F0 \n"

"loc_FF0CB2D8:\n"
"    CMP     R1, #0x14 \n"
"    CMPNE   R1, #0x15 \n"
"    CMPNE   R1, #0x16 \n"
"    CMPNE   R1, #0x17 \n"
"    BNE     loc_FF0CB390 \n"
"    ADD     R3, SP, #0xC \n"
"    MOV     R2, SP \n"
"    ADD     R1, SP, #0x1C \n"
"    BL      sub_FF0C9780 \n"
"    CMP     R0, #1 \n"
"    MOV     R9, R0 \n"
"    CMPNE   R9, #5 \n"
"    BNE     loc_FF0CB32C \n"
"    LDR     R0, [SP, #0x28] \n"
"    MOV     R2, R9 \n"
"    LDR     R1, [R0, #0x7C]! \n"
"    LDR     R12, [R0, #0x10]! \n"
"    LDR     R3, [R0, #4] \n"
"    MOV     R0, SP \n"
"    BLX     R12 \n"
"    B       loc_FF0CB364 \n"

"loc_FF0CB32C:\n"
"    LDR     R0, [SP, #0x28] \n"
"    CMP     R9, #2 \n"
"    LDR     R3, [R0, #0x90] \n"
"    CMPNE   R9, #6 \n"
"    BNE     loc_FF0CB378 \n"
"    LDR     R12, [R0, #0x8C] \n"
"    MOV     R2, R9 \n"
"    MOV     R1, #1 \n"
"    MOV     R0, SP \n"
"    BLX     R12 \n"
"    LDR     R0, [SP, #0x28] \n"
"    MOV     R2, SP \n"
"    ADD     R1, SP, #0x1C \n"
"    BL      sub_FF0CAD44 \n"

"loc_FF0CB364:\n"
"    LDR     R0, [SP, #0x28] \n"
"    LDR     R2, [SP, #0xC] \n"
"    MOV     R1, R9 \n"
"    BL      sub_FF0CAFF4 \n"
"    B       loc_FF0CB5F8 \n"

"loc_FF0CB378:\n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R12, [R0, #0x8C] \n"
"    MOV     R2, R9 \n"
"    ADD     R0, R0, #4 \n"
"    BLX     R12 \n"
"    B       loc_FF0CB5F8 \n"

"loc_FF0CB390:\n"
"    CMP     R1, #0x24 \n"
"    CMPNE   R1, #0x25 \n"
"    BNE     loc_FF0CB3DC \n"
"    LDR     R1, [R0, #0x7C] \n"
"    ADD     R1, R1, R1, LSL#1 \n"
"    ADD     R1, R0, R1, LSL#2 \n"
"    SUB     R1, R1, #8 \n"
"    LDMIA   R1, {R2,R3,R9} \n"
"    STMIA   R5, {R2,R3,R9} \n"
"    BL      sub_FF0C84E4 \n"
"    LDR     R0, [SP, #0x28] \n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R3, [R0, #0x8C] \n"
"    LDR     R2, [R0, #0x90] \n"
"    ADD     R0, R0, #4 \n"
"    BLX     R3 \n"
"    LDR     R0, [SP, #0x28] \n"
"    BL      sub_FF0C8940 \n"
"    B       loc_FF0CB5F8 \n"

"loc_FF0CB3DC:\n"
"    ADD     R1, R0, #4 \n"
"    LDMIA   R1, {R2,R3,R9} \n"
"    STMIA   R5, {R2,R3,R9} \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #0x28 \n"
"    ADDCC   PC, PC, R1, LSL#2 \n"
"    B       loc_FF0CB5E0 \n"
"    B       loc_FF0CB498 \n"
"    B       loc_FF0CB498 \n"
"    B       loc_FF0CB4A0 \n"
"    B       loc_FF0CB4A8 \n"
"    B       loc_FF0CB4A8 \n"
"    B       loc_FF0CB4A8 \n"
"    B       loc_FF0CB498 \n"
"    B       loc_FF0CB4A0 \n"
"    B       loc_FF0CB4A8 \n"
"    B       loc_FF0CB4A8 \n"
"    B       loc_FF0CB4C0 \n"
"    B       loc_FF0CB4C0 \n"
"    B       loc_FF0CB5CC \n"
"    B       loc_FF0CB5D4 \n"
"    B       loc_FF0CB5D4 \n"
"    B       loc_FF0CB5D4 \n"
"    B       loc_FF0CB5D4 \n"
"    B       loc_FF0CB5DC \n"
"    B       loc_FF0CB5E0 \n"
"    B       loc_FF0CB5E0 \n"
"    B       loc_FF0CB5E0 \n"
"    B       loc_FF0CB5E0 \n"
"    B       loc_FF0CB5E0 \n"
"    B       loc_FF0CB5E0 \n"
"    B       loc_FF0CB4B0 \n"
"    B       loc_FF0CB4B8 \n"
"    B       loc_FF0CB4B8 \n"
"    B       loc_FF0CB4B8 \n"
"    B       loc_FF0CB4CC \n"
"    B       loc_FF0CB4CC \n"
"    B       loc_FF0CB4D4 \n"
"    B       loc_FF0CB50C \n"
"    B       loc_FF0CB544 \n"
"    B       loc_FF0CB57C \n"
"    B       loc_FF0CB5B4 \n"
"    B       loc_FF0CB5B4 \n"
"    B       loc_FF0CB5E0 \n"
"    B       loc_FF0CB5E0 \n"
"    B       loc_FF0CB5BC \n"
"    B       loc_FF0CB5C4 \n"

"loc_FF0CB498:\n"
"    BL      sub_FF0C6D6C \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB4A0:\n"
"    BL      sub_FF0C70AC \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB4A8:\n"
"    BL      sub_FF0C7318 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB4B0:\n"
"    BL      sub_FF0C7610 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB4B8:\n"
"    BL      sub_FF0C782C \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB4C0:\n"
"    BL      sub_FF0C7C14_my \n"  // --> Patched. Old value = 0xFF0C7C14.
"    MOV     R8, #0 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB4CC:\n"
"    BL      sub_FF0C7D54 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB4D4:\n"
"    LDRH    R1, [R0, #4] \n"
"    STRH    R1, [SP, #0x1C] \n"
"    LDRH    R1, [R4, #2] \n"
"    STRH    R1, [SP, #0x1E] \n"
"    LDRH    R1, [R4, #4] \n"
"    STRH    R1, [SP, #0x20] \n"
"    LDRH    R1, [R4, #6] \n"
"    STRH    R1, [SP, #0x22] \n"
"    LDRH    R1, [R0, #0xC] \n"
"    STRH    R1, [SP, #0x24] \n"
"    LDRH    R1, [R4, #0xA] \n"
"    STRH    R1, [SP, #0x26] \n"
"    BL      sub_FF0CC66C \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB50C:\n"
"    LDRH    R1, [R0, #4] \n"
"    STRH    R1, [SP, #0x1C] \n"
"    LDRH    R1, [R4, #2] \n"
"    STRH    R1, [SP, #0x1E] \n"
"    LDRH    R1, [R4, #4] \n"
"    STRH    R1, [SP, #0x20] \n"
"    LDRH    R1, [R4, #6] \n"
"    STRH    R1, [SP, #0x22] \n"
"    LDRH    R1, [R4, #8] \n"
"    STRH    R1, [SP, #0x24] \n"
"    LDRH    R1, [R4, #0xA] \n"
"    STRH    R1, [SP, #0x26] \n"
"    BL      sub_FF0CC7E4 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB544:\n"
"    LDRH    R1, [R4] \n"
"    STRH    R1, [SP, #0x1C] \n"
"    LDRH    R1, [R0, #6] \n"
"    STRH    R1, [SP, #0x1E] \n"
"    LDRH    R1, [R4, #4] \n"
"    STRH    R1, [SP, #0x20] \n"
"    LDRH    R1, [R4, #6] \n"
"    STRH    R1, [SP, #0x22] \n"
"    LDRH    R1, [R4, #8] \n"
"    STRH    R1, [SP, #0x24] \n"
"    LDRH    R1, [R4, #0xA] \n"
"    STRH    R1, [SP, #0x26] \n"
"    BL      sub_FF0CC898 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB57C:\n"
"    LDRH    R1, [R4] \n"
"    STRH    R1, [SP, #0x1C] \n"
"    LDRH    R1, [R4, #2] \n"
"    STRH    R1, [SP, #0x1E] \n"
"    LDRH    R1, [R4, #4] \n"
"    STRH    R1, [SP, #0x20] \n"
"    LDRH    R1, [R4, #6] \n"
"    STRH    R1, [SP, #0x22] \n"
"    LDRH    R1, [R0, #0xC] \n"
"    STRH    R1, [SP, #0x24] \n"
"    LDRH    R1, [R4, #0xA] \n"
"    STRH    R1, [SP, #0x26] \n"
"    BL      sub_FF0CC940 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB5B4:\n"
"    BL      sub_FF0C8278 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB5BC:\n"
"    BL      sub_FF0C8A44 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB5C4:\n"
"    BL      sub_FF0C8D2C \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB5CC:\n"
"    BL      sub_FF0C8FE8 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB5D4:\n"
"    BL      sub_FF0C91A8 \n"
"    B       loc_FF0CB5E0 \n"

"loc_FF0CB5DC:\n"
"    BL      sub_FF0C9310 \n"

"loc_FF0CB5E0:\n"
"    LDR     R0, [SP, #0x28] \n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R2, [R0, #0x90] \n"
"    LDR     R3, [R0, #0x8C] \n"

"loc_FF0CB5F0:\n"
"    ADD     R0, R0, #4 \n"
"    BLX     R3 \n"

"loc_FF0CB5F8:\n"
"    LDR     R0, [SP, #0x28] \n"
"    LDR     R0, [R0] \n"
"    CMP     R0, #0x10 \n"
"    BEQ     loc_FF0CB630 \n"
"    BGT     loc_FF0CB620 \n"
"    CMP     R0, #1 \n"
"    CMPNE   R0, #4 \n"
"    CMPNE   R0, #0xE \n"
"    BNE     loc_FF0CB664 \n"
"    B       loc_FF0CB630 \n"

"loc_FF0CB620:\n"
"    CMP     R0, #0x13 \n"
"    CMPNE   R0, #0x17 \n"
"    CMPNE   R0, #0x1A \n"
"    BNE     loc_FF0CB664 \n"

"loc_FF0CB630:\n"
"    LDRSH   R0, [R4] \n"
"    CMN     R0, #0xC00 \n"
"    LDRNESH R1, [R4, #8] \n"
"    CMNNE   R1, #0xC00 \n"
"    STRNEH  R0, [SP, #0x1C] \n"
"    STRNEH  R1, [SP, #0x24] \n"
"    BNE     loc_FF0CB664 \n"
"    ADD     R0, SP, #0x10 \n"
"    BL      sub_FF0CCBF0 \n"
"    LDRH    R0, [SP, #0x10] \n"
"    STRH    R0, [SP, #0x1C] \n"
"    LDRH    R0, [SP, #0x18] \n"
"    STRH    R0, [SP, #0x24] \n"

"loc_FF0CB664:\n"
"    LDR     R0, [SP, #0x28] \n"
"    CMP     R8, #1 \n"
"    BNE     loc_FF0CB6B4 \n"
"    LDR     R1, [R0, #0x7C] \n"
"    MOV     R2, #0xC \n"
"    ADD     R1, R1, R1, LSL#1 \n"
"    ADD     R0, R0, R1, LSL#2 \n"
"    SUB     R8, R0, #8 \n"
"    LDR     R0, =0x61A08 \n"
"    ADD     R1, SP, #0x1C \n"
"    BL      sub_00690174 \n"
"    LDR     R0, =0x61A14 \n"
"    MOV     R2, #0xC \n"
"    ADD     R1, SP, #0x1C \n"
"    BL      sub_00690174 \n"
"    LDR     R0, =0x61A20 \n"
"    MOV     R2, #0xC \n"
"    MOV     R1, R8 \n"
"    BL      sub_00690174 \n"
"    B       loc_FF0CB72C \n"

"loc_FF0CB6B4:\n"
"    LDR     R0, [R0] \n"
"    MOV     R3, #1 \n"
"    CMP     R0, #0xB \n"
"    BNE     loc_FF0CB6F8 \n"
"    MOV     R2, #0 \n"
"    STRD    R2, [SP] \n"
"    MOV     R2, R3 \n"
"    MOV     R1, R3 \n"
"    MOV     R0, #0 \n"
"    BL      sub_FF0C6B40 \n"
"    MOV     R3, #1 \n"
"    MOV     R2, #0 \n"
"    STRD    R2, [SP] \n"
"    MOV     R2, R3 \n"
"    MOV     R1, R3 \n"
"    MOV     R0, #0 \n"
"    B       loc_FF0CB728 \n"

"loc_FF0CB6F8:\n"
"    MOV     R2, #1 \n"
"    STRD    R2, [SP] \n"
"    MOV     R3, R2 \n"
"    MOV     R1, R2 \n"
"    MOV     R0, R2 \n"
"    BL      sub_FF0C6B40 \n"
"    MOV     R3, #1 \n"
"    MOV     R2, R3 \n"
"    MOV     R1, R3 \n"
"    MOV     R0, R3 \n"
"    STR     R3, [SP] \n"
"    STR     R3, [SP, #4] \n"

"loc_FF0CB728:\n"
"    BL      sub_FF0C6CB8 \n"

"loc_FF0CB72C:\n"
"    LDR     R0, [SP, #0x28] \n"
"    BL      sub_FF0CC5D8 \n"
"    B       loc_FF0CB0C4 \n"
);
}

/*************************************************************/
//** sub_FF0C7C14_my @ 0xFF0C7C14 - 0xFF0C7D50, length=80
void __attribute__((naked,noinline)) sub_FF0C7C14_my() {
asm volatile (
"    STMFD   SP!, {R4-R8,LR} \n"
"    LDR     R7, =0x4DBC \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R7, #0x1C] \n"
"    MOV     R1, #0x3E \n"
"    BL      sub_0068BB84 /*_ClearEventFlag*/ \n"
"    MOV     R2, #0 \n"
"    LDRSH   R0, [R4, #4] \n"
"    MOV     R1, R2 \n"
"    BL      sub_FF0C6840 \n"
"    MOV     R6, R0 \n"
"    LDRSH   R0, [R4, #6] \n"
"    BL      sub_FF0C69A0 \n"
"    LDRSH   R0, [R4, #8] \n"
"    BL      sub_FF0C69F8 \n"
"    LDRSH   R0, [R4, #0xA] \n"
"    BL      sub_FF0C6A50 \n"
"    LDRSH   R0, [R4, #0xC] \n"
"    MOV     R1, #0 \n"
"    BL      sub_FF0C6AA8 \n"
"    MOV     R5, R0 \n"
"    LDR     R0, [R4] \n"
"    LDR     R8, =0x61A20 \n"
"    CMP     R0, #0xB \n"
"    MOVEQ   R6, #0 \n"
"    MOVEQ   R5, R6 \n"
"    BEQ     loc_FF0C7CA8 \n"
"    CMP     R6, #1 \n"
"    BNE     loc_FF0C7CA8 \n"
"    LDRSH   R0, [R4, #4] \n"
"    LDR     R1, =0xFF0C6798 \n"
"    MOV     R2, #2 \n"
"    BL      sub_FF07C450 \n"
"    STRH    R0, [R4, #4] \n"
"    MOV     R0, #0 \n"
"    STR     R0, [R7, #0x28] \n"
"    B       loc_FF0C7CB0 \n"

"loc_FF0C7CA8:\n"
"    LDRH    R0, [R8] \n"
"    STRH    R0, [R4, #4] \n"

"loc_FF0C7CB0:\n"
"    CMP     R5, #1 \n"
"    LDRNEH  R0, [R8, #8] \n"
"    BNE     loc_FF0C7CCC \n"
"    LDRSH   R0, [R4, #0xC] \n"
"    LDR     R1, =0xFF0C681C \n"
"    MOV     R2, #0x20 \n"
"    BL      sub_FF0CC628 \n"

"loc_FF0C7CCC:\n"
"    STRH    R0, [R4, #0xC] \n"
"    LDRSH   R0, [R4, #6] \n"
"    BL      sub_FF0B5288_my \n"  // --> Patched. Old value = 0xFF0B5288.
"    LDRSH   R0, [R4, #8] \n"
"    MOV     R1, #1 \n"
"    BL      sub_FF0B5ADC \n"
"    MOV     R1, #0 \n"
"    ADD     R0, R4, #8 \n"
"    BL      sub_FF0B5B64 \n"
"    LDRSH   R0, [R4, #0xE] \n"
"    BL      sub_FF0C0A04 \n"
"    LDR     R4, =0xBB8 \n"
"    CMP     R6, #1 \n"
"    BNE     loc_FF0C7D24 \n"
"    LDR     R0, [R7, #0x1C] \n"
"    MOV     R2, R4 \n"
"    MOV     R1, #2 \n"
"    BL      sub_0068BA90 /*_WaitForAllEventFlag*/ \n"
"    TST     R0, #1 \n"
"    LDRNE   R0, =0xFF0C6F58 \n"
"    MOVNE   R1, #0x820 \n"
"    BLNE    _DebugAssert \n"

"loc_FF0C7D24:\n"
"    CMP     R5, #1 \n"
"    LDMNEFD SP!, {R4-R8,PC} \n"
"    LDR     R0, [R7, #0x1C] \n"
"    MOV     R2, R4 \n"
"    MOV     R1, #0x20 \n"
"    BL      sub_0068BA90 /*_WaitForAllEventFlag*/ \n"
"    TST     R0, #1 \n"
"    LDMEQFD SP!, {R4-R8,PC} \n"
"    LDMFD   SP!, {R4-R8,LR} \n"
"    LDR     R1, =0x825 \n"
"    LDR     R0, =0xFF0C6F58 \n"
"    B       _DebugAssert \n"
);
}

/*************************************************************/
//** sub_FF0B5288_my @ 0xFF0B5288 - 0xFF0B52F0, length=27
void __attribute__((naked,noinline)) sub_FF0B5288_my() {
asm volatile (
"    STMFD   SP!, {R4-R6,LR} \n"
"    LDR     R5, =0x4A28 \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R5, #4] \n"
"    CMP     R0, #1 \n"
"    MOVNE   R1, #0x154 \n"
"    LDRNE   R0, =0xFF0B5084 \n"
"    BLNE    _DebugAssert \n"
"    CMN     R4, #0xC00 \n"
"    LDREQSH R4, [R5, #2] \n"
"    CMN     R4, #0xC00 \n"
"    LDREQ   R1, =0x15A \n"
"    LDREQ   R0, =0xFF0B5084 \n"
"    STRH    R4, [R5, #2] \n"
"    BLEQ    _DebugAssert \n"
"    MOV     R0, R4 \n"
"    BL      apex2us \n"  // --> Patched. Old value = _apex2us.
"    MOV     R4, R0 \n"
//"  BL      _sub_FF136FB0 \n"  // --> Nullsub call removed.
"    MOV     R0, R4 \n"
"    BL      sub_FF140728 \n"
"    TST     R0, #1 \n"
"    LDMEQFD SP!, {R4-R6,PC} \n"
"    LDMFD   SP!, {R4-R6,LR} \n"
"    LDR     R1, =0x15F \n"
"    LDR     R0, =0xFF0B5084 \n"
"    B       _DebugAssert \n"
);
}
