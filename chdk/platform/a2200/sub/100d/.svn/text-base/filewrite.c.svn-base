/*
 * filewrite.c - auto-generated by CHDK code_gen.
 */
#include "lolevel.h"
#include "platform.h"

typedef struct {
    unsigned int address;
    unsigned int length;
} cam_ptp_data_chunk; //camera specific structure

#define MAX_CHUNKS_FOR_JPEG 7 // filewritetask is prepared for this many chunks
/*
 * fwt_data_struct: defined here as it's camera dependent
 * unneeded members are designated with unkn
 * file_offset, full_size, seek_flag only needs to be defined for DryOS>=r50 generation cameras
 * pdc is always required
 * name is not currently used
 */

typedef struct
{
    int unkn1[5];
    cam_ptp_data_chunk pdc[MAX_CHUNKS_FOR_JPEG];
    int unkn6;
    char name[32];
} fwt_data_struct;

#include "../../../generic/filewrite.c"

/*************************************************************/
//** filewritetask @ 0xFFA88EC4 - 0xFFA88FA4, length=57
void __attribute__((naked,noinline)) filewritetask() {
asm volatile (
"    STMFD   SP!, {R1-R5,LR} \n"
"    LDR     R5, =0xAA98 \n"

"loc_FFA88ECC:\n"
"    MOV     R2, #0 \n"
"    LDR     R0, [R5, #0x10] \n"
"    ADD     R1, SP, #8 \n"
"    BL      sub_FF839B6C /*_ReceiveMessageQueue*/ \n"
"    CMP     R0, #0 \n"
"    LDRNE   R1, =0x33F \n"
"    LDRNE   R0, =0xFFA88FB8 \n"
"    BLNE    _DebugAssert \n"
"    LDR     R0, [SP, #8] \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #0xA \n"
"    ADDCC   PC, PC, R1, LSL#2 \n"
"    B       loc_FFA88ECC \n"
"    B       loc_FFA88F98 \n"
"    B       loc_FFA88F98 \n"
"    B       loc_FFA88F98 \n"
"    B       loc_FFA88F98 \n"
"    B       loc_FFA88F98 \n"
"    B       loc_FFA88F98 \n"
"    B       loc_FFA88F98 \n"
"    B       loc_FFA88FA0 \n"
"    B       loc_FFA88F28 \n"
"    B       loc_FFA88F90 \n"

"loc_FFA88F28:\n"
"    MOV     R0, #0 \n"
"    MOV     R4, R5 \n"
"    STR     R0, [SP] \n"

"loc_FFA88F34:\n"
"    LDR     R0, [R4, #0x10] \n"
"    MOV     R1, SP \n"
"    BL      sub_FF839DB0 /*_GetNumberOfPostedMessages*/ \n"
"    LDR     R0, [SP] \n"
"    CMP     R0, #0 \n"
"    BEQ     loc_FFA88F60 \n"
"    LDR     R0, [R4, #0x10] \n"
"    MOV     R2, #0 \n"
"    ADD     R1, SP, #4 \n"
"    BL      sub_FF839B6C /*_ReceiveMessageQueue*/ \n"
"    B       loc_FFA88F34 \n"

"loc_FFA88F60:\n"
"    LDR     R0, [R4, #4] \n"
"    CMN     R0, #1 \n"
"    BEQ     loc_FFA88F84 \n"
"    BL      fwt_close \n"  // --> Patched. Old value = _Close.
"    MVN     R0, #0 \n"
"    STR     R0, [R4, #4] \n"
"    LDR     R0, =0xF8A40 \n"
"    BL      sub_FF86FE74 \n"
"    BL      sub_FF86E0A0 \n"

"loc_FFA88F84:\n"
"    LDR     R0, [R4, #0xC] \n"
"    BL      _GiveSemaphore \n"
"    B       loc_FFA88ECC \n"

"loc_FFA88F90:\n"
"    BL      sub_FFA891A0_my \n"  // --> Patched. Old value = 0xFFA891A0. Open stage
"    B       loc_FFA88ECC \n"

"loc_FFA88F98:\n"
"    BL      sub_FFA892E8_my \n"  // --> Patched. Old value = 0xFFA892E8. Write stage
"    B       loc_FFA88ECC \n"

"loc_FFA88FA0:\n"
"    BL      sub_FFA88D50_my \n"  // --> Patched. Old value = 0xFFA88D50. Close stage
"    B       loc_FFA88ECC \n"
);
}

/*************************************************************/
//** sub_FFA891A0_my @ 0xFFA891A0 - 0xFFA891F4, length=22
void __attribute__((naked,noinline)) sub_FFA891A0_my() {
asm volatile (
"    STMFD   SP!, {R4-R8,LR} \n"
"    MOV     R4, R0 \n"
"    SUB     SP, SP, #0x38 \n"
"    ADD     R0, R0, #0x50 \n"
"    BL      sub_FF86FE74 \n"
"    MOV     R1, #0 \n"
"    BL      sub_FF86E038 \n"
"    LDR     R0, [R4, #0xC] \n"
"    BL      sub_FF81033C \n"
"    LDR     R0, [R4, #0x4C] \n"
"    LDR     R8, =0x1B6 \n"
"    CMP     R0, #1 \n"
"    LDREQ   R0, [R4, #8] \n"
"    ADD     R6, R4, #0x50 \n"
"    ORREQ   R0, R0, #0x8000 \n"
"    STREQ   R0, [R4, #8] \n"
//hook start
"    STMFD SP!, {R4-R12,LR}\n"
"    MOV R0, R4\n"
"    BL filewrite_main_hook\n"
"    LDMFD SP!, {R4-R12,LR}\n"
//hook end
"    LDR     R7, [R4, #8] \n"
"    LDR     R5, [R4, #0xC] \n"
"    MOV     R2, R8 \n"
"    MOV     R1, R7 \n"
"    MOV     R0, R6 \n"
"    BL      fwt_open \n"  // --> Patched. Old value = _Open.
"    LDR     PC, =0xFFA891F8 \n"  // Continue in firmware
);
}

/*************************************************************/
//** sub_FFA892E8_my @ 0xFFA892E8 - 0xFFA893F0, length=67
void __attribute__((naked,noinline)) sub_FFA892E8_my() {
asm volatile (
"    STMFD   SP!, {R4-R10,LR} \n"
"    MOV     R5, R0 \n"
"    LDR     R0, [R0] \n"
"    CMP     R0, #6 \n"
"    BHI     loc_FFA89314 \n"
"    ADD     R0, R5, R0, LSL#3 \n"
"    LDR     R8, [R0, #0x14]! \n"
"    LDR     R7, [R0, #4] \n"
"    CMP     R7, #0 \n"
"    BNE     loc_FFA8932C \n"
"    B       loc_FFA89320 \n"

"loc_FFA89314:\n"
"    LDR     R1, =0x299 \n"
"    LDR     R0, =0xFFA88FB8 \n"
"    BL      _DebugAssert \n"

"loc_FFA89320:\n"
"    MOV     R1, R5 \n"
"    MOV     R0, #7 \n"
"    B       loc_FFA893C0 \n"

"loc_FFA8932C:\n"
"    LDR     R9, =0xAA98 \n"
"    MOV     R4, R7 \n"

"loc_FFA89334:\n"
"    LDR     R0, [R5, #4] \n"
"    CMP     R4, #0x1000000 \n"
"    MOVLS   R6, R4 \n"
"    MOVHI   R6, #0x1000000 \n"
"    BIC     R1, R0, #0xFF000000 \n"
"    CMP     R1, #0 \n"
"    BICNE   R0, R0, #0xFF000000 \n"
"    RSBNE   R0, R0, #0x1000000 \n"
"    CMPNE   R6, R0 \n"
"    MOVHI   R6, R0 \n"
"    LDR     R0, [R9, #4] \n"
"    MOV     R2, R6 \n"
"    MOV     R1, R8 \n"
"    BL      fwt_write \n"  // --> Patched. Old value = _Write.
"    LDR     R1, [R5, #4] \n"
"    CMP     R6, R0 \n"
"    ADD     R1, R1, R0 \n"
"    STR     R1, [R5, #4] \n"
"    BEQ     loc_FFA89394 \n"
"    CMN     R0, #1 \n"
"    LDRNE   R0, =0x9200015 \n"
"    LDREQ   R0, =0x9200005 \n"
"    STR     R0, [R5, #0x10] \n"
"    B       loc_FFA89320 \n"

"loc_FFA89394:\n"
"    SUB     R4, R4, R0 \n"
"    CMP     R4, R7 \n"
"    ADD     R8, R8, R0 \n"
"    MOVCS   R1, #0x2C4 \n"
"    LDRCS   R0, =0xFFA88FB8 \n"
"    BLCS    _DebugAssert \n"
"    CMP     R4, #0 \n"
"    BNE     loc_FFA89334 \n"
"    LDR     R0, [R5] \n"
"    MOV     R1, R5 \n"
"    ADD     R0, R0, #1 \n"

"loc_FFA893C0:\n"
"    LDMFD   SP!, {R4-R10,LR} \n"
"    B       sub_FFA88CA0 \n"
);
}

/*************************************************************/
//** sub_FFA88D50_my @ 0xFFA88D50 - 0xFFA88D84, length=14
void __attribute__((naked,noinline)) sub_FFA88D50_my() {
asm volatile (
"    STMFD   SP!, {R4-R6,LR} \n"
"    LDR     R5, =0xAA98 \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R5, #4] \n"
"    SUB     SP, SP, #0x38 \n"
"    CMN     R0, #1 \n"
"    BEQ     sub_FFA88D98 \n"
"    LDR     R1, [R4, #8] \n"
"    LDR     R6, =0x9200003 \n"
"    TST     R1, #0x8000 \n"
"    BEQ     loc_FFA88D84 \n"
//mod start
"    LDR R3, =current_write_ignored\n"
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_D\n" // jump over the next block
//mod end
"    BL      sub_FF836E2C \n"
"    B       sub_FFA88D88 \n"

"loc_FFA88D84:\n"
"loc_D:\n"
"    BL      fwt_close \n"  // --> Patched. Old value = _Close.
"    LDR     PC, =0xFFA88D88 \n"  // Continue in firmware
);
}
