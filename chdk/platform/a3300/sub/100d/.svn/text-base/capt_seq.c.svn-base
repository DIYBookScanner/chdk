/*
 * capt_seq.c - auto-generated by CHDK code_gen.
 */
#include "lolevel.h"
#include "platform.h"
#include "core.h"

#define USE_STUBS_NRFLAG 1          // see stubs_entry.S
#define NR_AUTO (0)                 // have to explictly reset value back to 0 to enable auto
#define PAUSE_FOR_FILE_COUNTER 100  // Enable delay in capt_seq_hook_raw_here to ensure file counter is updated

#include "../../../generic/capt_seq.c"

/*************************************************************/
//** capt_seq_task @ 0xFF87AB40 - 0xFF87ADD4, length=166
void __attribute__((naked,noinline)) capt_seq_task() {
asm volatile (
"    STMFD   SP!, {R3-R9,LR} \n"
"    LDR     R5, =0x3A29C \n"
"    LDR     R7, =0x2B90 \n"
"    MOV     R6, #0 \n"

"loc_FF87AB50:\n"
"    LDR     R0, [R7, #4] \n"
"    MOV     R2, #0 \n"
"    MOV     R1, SP \n"
"    BL      sub_FF839BD8 /*_ReceiveMessageQueue*/ \n"
"    TST     R0, #1 \n"
"    BEQ     loc_FF87AB7C \n"
"    LDR     R1, =0x476 \n"
"    LDR     R0, =0xFF87A6E0 \n"
"    BL      _DebugAssert \n"
"    BL      _ExitTask \n"
"    LDMFD   SP!, {R3-R9,PC} \n"

"loc_FF87AB7C:\n"
"    LDR     R0, [SP] \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #0x20 \n"
"    ADDCC   PC, PC, R1, LSL#2 \n"
"    B       loc_FF87AD9C \n"
"    B       loc_FF87AC10 \n"
"    B       loc_FF87AC28 \n"
"    B       loc_FF87AC54 \n"
"    B       loc_FF87AC68 \n"
"    B       loc_FF87AC60 \n"
"    B       loc_FF87AC74 \n"
"    B       loc_FF87AC7C \n"
"    B       loc_FF87AC84 \n"
"    B       loc_FF87ACA0 \n"
"    B       loc_FF87ACC8 \n"
"    B       loc_FF87ACAC \n"
"    B       loc_FF87ACB8 \n"
"    B       loc_FF87ACC0 \n"
"    B       loc_FF87ACD0 \n"
"    B       loc_FF87ACD8 \n"
"    B       loc_FF87ACE0 \n"
"    B       loc_FF87ACE8 \n"
"    B       loc_FF87ACF0 \n"
"    B       loc_FF87ACFC \n"
"    B       loc_FF87AD04 \n"
"    B       loc_FF87AD0C \n"
"    B       loc_FF87AD14 \n"
"    B       loc_FF87AD1C \n"
"    B       loc_FF87AD28 \n"
"    B       loc_FF87AD30 \n"
"    B       loc_FF87AD38 \n"
"    B       loc_FF87AD40 \n"
"    B       loc_FF87AD48 \n"
"    B       loc_FF87AD50 \n"
"    B       loc_FF87AD58 \n"
"    B       loc_FF87AD64 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AC10:\n"
"    BL      shooting_expo_iso_override\n"      // added
"    BL      sub_FF87B320 \n"
"    BL      shooting_expo_param_override\n"    // added
"    BL      sub_FF87876C \n"
"    LDR     R0, [R5, #0x28] \n"
"    CMP     R0, #0 \n"
"    BLNE    sub_FF96F034 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AC28:\n"
"    LDR     R8, [R0, #0xC] \n"
"    MOV     R0, R8 \n"
"    BL      sub_FF96EF54_my \n"  // --> Patched. Old value = 0xFF96EF54.
"    BL      capt_seq_hook_raw_here \n"         // added
"    MOV     R4, R0 \n"
"    MOV     R2, R8 \n"
"    MOV     R1, #1 \n"
"    BL      sub_FF878D60 \n"
"    TST     R4, #1 \n"
"    MOVEQ   R0, R8 \n"
"    BLEQ    sub_FF96E9F4 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AC54:\n"
"    MOV     R0, #1 \n"
"    BL      sub_FF87B5C0 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AC60:\n"
"    BL      sub_FF87AFB4 \n"
"    B       loc_FF87AC6C \n"

"loc_FF87AC68:\n"
"    BL      sub_FF87B300 \n"

"loc_FF87AC6C:\n"
"    STR     R6, [R5, #0x28] \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AC74:\n"
"    BL      sub_FF87B308 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AC7C:\n"
"    BL      sub_FF87B4D4 \n"
"    B       loc_FF87ACA4 \n"

"loc_FF87AC84:\n"
"    LDR     R4, [R0, #0xC] \n"
"    MOV     R0, R4 \n"
"    BL      sub_FF96F088 \n"
"    MOV     R2, R4 \n"
"    MOV     R1, #9 \n"
"    BL      sub_FF878D60 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACA0:\n"
"    BL      sub_FF87B538 \n"

"loc_FF87ACA4:\n"
"    BL      sub_FF87876C \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACAC:\n"
"    LDR     R0, [R5, #0x58] \n"
"    BL      sub_FF87BA04 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACB8:\n"
"    BL      sub_FF87BD7C \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACC0:\n"
"    BL      sub_FF87BDE0 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACC8:\n"
"    BL      sub_FF87B300 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACD0:\n"
"    BL      sub_FF96DDFC \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACD8:\n"
"    BL      sub_FF96E008 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACE0:\n"
"    BL      sub_FF96E0AC \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACE8:\n"
"    BL      sub_FF96E17C \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACF0:\n"
"    MOV     R0, #0 \n"
"    BL      sub_FF96E384 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87ACFC:\n"
"    BL      sub_FF96E4FC \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD04:\n"
"    BL      sub_FF96E5A0 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD0C:\n"
"    BL      sub_FF96E680 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD14:\n"
"    BL      sub_FF87B72C \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD1C:\n"
"    BL      sub_FF87B758 \n"
"    BL      sub_FF837AA8 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD28:\n"
"    BL      sub_FF96E240 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD30:\n"
"    BL      sub_FF96E280 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD38:\n"
"    BL      sub_FF87E0E8 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD40:\n"
"    BL      sub_FF87E158 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD48:\n"
"    BL      sub_FF96E7B8 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD50:\n"
"    BL      sub_FF96E81C \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD58:\n"
"    BL      sub_FF87E1B4 \n"
"    BL      sub_FF87E174 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD64:\n"
"    MOV     R0, #1 \n"
"    BL      sub_FF96F800 \n"
"    MOV     R0, #1 \n"
"    BL      sub_FF96F928 \n"
"    LDRH    R0, [R5, #0x98] \n"
"    CMP     R0, #4 \n"
"    LDRNEH  R0, [R5] \n"
"    SUBNE   R1, R0, #0x4200 \n"
"    SUBNES  R1, R1, #0x2A \n"
"    BNE     loc_FF87ADA8 \n"
"    BL      sub_FF87E158 \n"
"    BL      sub_FF87E758 \n"
"    BL      sub_FF87E5D8 \n"
"    B       loc_FF87ADA8 \n"

"loc_FF87AD9C:\n"
"    LDR     R1, =0x5D7 \n"
"    LDR     R0, =0xFF87A6E0 \n"
"    BL      _DebugAssert \n"

"loc_FF87ADA8:\n"
"    LDR     R0, [SP] \n"
"    LDR     R1, [R0, #4] \n"
"    LDR     R0, [R7] \n"
"    BL      sub_FF884D84 /*_SetEventFlag*/ \n"
"    LDR     R4, [SP] \n"
"    LDR     R0, [R4, #8] \n"
"    CMP     R0, #0 \n"
"    LDREQ   R0, =0xFF87A6E0 \n"
"    MOVEQ   R1, #0x118 \n"
"    BLEQ    _DebugAssert \n"
"    STR     R6, [R4, #8] \n"
"    B       loc_FF87AB50 \n"
);
}

/*************************************************************/
//** sub_FF96EF54_my @ 0xFF96EF54 - 0xFF96F030, length=56
void __attribute__((naked,noinline)) sub_FF96EF54_my() {
asm volatile (
"    STMFD   SP!, {R3-R7,LR} \n"
"    LDR     R6, =0x3A29C \n"
"    MOV     R5, R0 \n"
"    LDR     R0, [R6, #0x28] \n"
"    MOV     R4, #0 \n"
"    CMP     R0, #0 \n"
"    BNE     loc_FF96EF84 \n"
"    MOV     R0, #0xC \n"
"    BL      sub_FF87FC6C \n"
"    TST     R0, #1 \n"
"    MOVNE   R0, #1 \n"
"    BNE     loc_FF96F030 \n"

"loc_FF96EF84:\n"
"    BL      sub_FF87B310 \n"
"    LDR     R0, [R6, #0x28] \n"
"    CMP     R0, #0 \n"
"    BNE     loc_FF96F018 \n"
"    MOV     R0, R5 \n"
"    BL      sub_FF96E908 \n"
"    TST     R0, #1 \n"
"    BNE     loc_FF96F030 \n"
"    MOV     R0, R5 \n"
"    BL      sub_FF96EC7C \n"
"    BL      sub_FF96F5DC \n"
"    MOV     R4, #1 \n"
"    MOV     R0, #2 \n"
"    BL      sub_FF88142C \n"
"    BL      wait_until_remote_button_is_released\n" // added
"    BL      capt_seq_hook_set_nr\n"                 // added
"    LDRH    R0, [R6] \n"
"    SUB     R1, R0, #0x8200 \n"
"    SUBS    R1, R1, #0x2D \n"
"    BNE     loc_FF96F008 \n"
"    MOV     R2, #2 \n"
"    MOV     R1, SP \n"
"    ADD     R0, R2, #0x15C \n"
"    STR     R4, [SP] \n"
"    BL      _GetPropertyCase \n"
"    TST     R0, #1 \n"
"    MOVNE   R1, #0xBC \n"
"    LDRNE   R0, =0xFF96F0E0 \n"
"    BLNE    _DebugAssert \n"
"    LDRH    R0, [SP] \n"
"    CMP     R0, #1 \n"
"    STRHI   R4, [R5, #0xD4] \n"
"    BHI     loc_FF96F028 \n"
"    MOV     R0, #0 \n"
"    STR     R0, [R5, #0xD4] \n"

"loc_FF96F008:\n"
"    MOV     R0, R5 \n"
"    BL      sub_FFAB5898 \n"
"    MOV     R4, R0 \n"
"    B       loc_FF96F02C \n"

"loc_FF96F018:\n"
"    LDR     R0, =0x6AEC \n"
"    LDR     R0, [R0] \n"
"    CMP     R0, #0 \n"
"    BEQ     loc_FF96F02C \n"

"loc_FF96F028:\n"
"    MOV     R4, #0x1D \n"

"loc_FF96F02C:\n"
"    MOV     R0, R4 \n"

"loc_FF96F030:\n"
"    LDMFD   SP!, {R3-R7,PC} \n"
);
}

/*************************************************************/
//** exp_drv_task @ 0xFF8BE3EC - 0xFF8BEAB0, length=434
void __attribute__((naked,noinline)) exp_drv_task() {
asm volatile (
"    STMFD   SP!, {R4-R9,LR} \n"
"    SUB     SP, SP, #0x24 \n"
"    LDR     R6, =0x3EB0 \n"
"    LDR     R7, =0xBB8 \n"
"    LDR     R4, =0x55794 \n"
"    MOV     R0, #0 \n"
"    ADD     R5, SP, #0x14 \n"
"    STR     R0, [SP, #0x10] \n"

"loc_FF8BE40C:\n"
"    LDR     R0, [R6, #0x20] \n"
"    MOV     R2, #0 \n"
"    ADD     R1, SP, #0x20 \n"
"    BL      sub_FF839BD8 /*_ReceiveMessageQueue*/ \n"
"    LDR     R0, [SP, #0x10] \n"
"    CMP     R0, #1 \n"
"    BNE     loc_FF8BE458 \n"
"    LDR     R0, [SP, #0x20] \n"
"    LDR     R0, [R0] \n"
"    CMP     R0, #0x14 \n"
"    CMPNE   R0, #0x15 \n"
"    CMPNE   R0, #0x16 \n"
"    CMPNE   R0, #0x17 \n"
"    BEQ     loc_FF8BE5B8 \n"
"    CMP     R0, #0x29 \n"
"    BEQ     loc_FF8BE540 \n"
"    ADD     R1, SP, #0x10 \n"
"    MOV     R0, #0 \n"
"    BL      sub_FF8BE39C \n"

"loc_FF8BE458:\n"
"    LDR     R0, [SP, #0x20] \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #0x2F \n"
"    BNE     loc_FF8BE484 \n"
"    BL      sub_FF8BF888 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R1, #1 \n"
"    BL      sub_FF884D84 /*_SetEventFlag*/ \n"
"    BL      _ExitTask \n"
"    ADD     SP, SP, #0x24 \n"
"    LDMFD   SP!, {R4-R9,PC} \n"

"loc_FF8BE484:\n"
"    CMP     R1, #0x2E \n"
"    BNE     loc_FF8BE4A0 \n"
"    LDR     R2, [R0, #0x8C]! \n"
"    LDR     R1, [R0, #4] \n"
"    MOV     R0, R1 \n"
"    BLX     R2 \n"
"    B       loc_FF8BEAA8 \n"

"loc_FF8BE4A0:\n"
"    CMP     R1, #0x27 \n"
"    BNE     loc_FF8BE4F0 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R1, #0x80 \n"
"    BL      sub_FF884DB8 /*_ClearEventFlag*/ \n"
"    LDR     R0, =0xFF8B9F80 \n"
"    MOV     R1, #0x80 \n"
"    BL      sub_FF9619E4 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R2, R7 \n"
"    MOV     R1, #0x80 \n"
"    BL      sub_FF884CC4 /*_WaitForAllEventFlag*/ \n"
"    TST     R0, #1 \n"
"    LDRNE   R1, =0x174E \n"
"    BNE     loc_FF8BE5AC \n"

"loc_FF8BE4DC:\n"
"    LDR     R1, [SP, #0x20] \n"
"    LDR     R0, [R1, #0x90] \n"
"    LDR     R1, [R1, #0x8C] \n"
"    BLX     R1 \n"
"    B       loc_FF8BEAA8 \n"

"loc_FF8BE4F0:\n"
"    CMP     R1, #0x28 \n"
"    BNE     loc_FF8BE538 \n"
"    ADD     R1, SP, #0x10 \n"
"    BL      sub_FF8BE39C \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R1, #0x100 \n"
"    BL      sub_FF884DB8 /*_ClearEventFlag*/ \n"
"    LDR     R0, =0xFF8B9F90 \n"
"    MOV     R1, #0x100 \n"
"    BL      sub_FF961C84 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R2, R7 \n"
"    MOV     R1, #0x100 \n"
"    BL      sub_FF884CC4 /*_WaitForAllEventFlag*/ \n"
"    TST     R0, #1 \n"
"    BEQ     loc_FF8BE4DC \n"
"    LDR     R1, =0x1758 \n"
"    B       loc_FF8BE5AC \n"

"loc_FF8BE538:\n"
"    CMP     R1, #0x29 \n"
"    BNE     loc_FF8BE550 \n"

"loc_FF8BE540:\n"
"    LDR     R0, [SP, #0x20] \n"
"    ADD     R1, SP, #0x10 \n"
"    BL      sub_FF8BE39C \n"
"    B       loc_FF8BE4DC \n"

"loc_FF8BE550:\n"
"    CMP     R1, #0x2C \n"
"    BNE     loc_FF8BE568 \n"
"    BL      sub_FF8AC3BC \n"
"    BL      sub_FF8AD02C \n"
"    BL      sub_FF8ACBA4 \n"
"    B       loc_FF8BE4DC \n"

"loc_FF8BE568:\n"
"    CMP     R1, #0x2D \n"
"    BNE     loc_FF8BE5B8 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R1, #4 \n"
"    BL      sub_FF884DB8 /*_ClearEventFlag*/ \n"
"    LDR     R1, =0xFF8B9FB0 \n"
"    LDR     R0, =0xFFFFF400 \n"
"    MOV     R2, #4 \n"
"    BL      sub_FF8ABE30 \n"
"    BL      sub_FF8AC0C0 \n"
"    LDR     R0, [R6, #0x1C] \n"
"    MOV     R2, R7 \n"
"    MOV     R1, #4 \n"
"    BL      sub_FF884BE0 /*_WaitForAnyEventFlag*/ \n"
"    TST     R0, #1 \n"
"    BEQ     loc_FF8BE4DC \n"
"    MOV     R1, #0x1780 \n"

"loc_FF8BE5AC:\n"
"    LDR     R0, =0xFF8BA6A4 \n"
"    BL      _DebugAssert \n"
"    B       loc_FF8BE4DC \n"

"loc_FF8BE5B8:\n"
"    LDR     R0, [SP, #0x20] \n"
"    MOV     R8, #1 \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #0x12 \n"
"    CMPNE   R1, #0x13 \n"
"    BNE     loc_FF8BE680 \n"
"    LDR     R1, [R0, #0x7C] \n"
"    ADD     R1, R1, R1, LSL#1 \n"
"    ADD     R1, R0, R1, LSL#2 \n"
"    SUB     R1, R1, #8 \n"
"    LDMIA   R1, {R2,R3,R9} \n"
"    STMIA   R5, {R2,R3,R9} \n"
"    BL      sub_FF8BCA0C \n"
"    LDR     R0, [SP, #0x20] \n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R3, [R0, #0x8C] \n"
"    LDR     R2, [R0, #0x90] \n"
"    ADD     R0, R0, #4 \n"
"    BLX     R3 \n"
"    LDR     R0, [SP, #0x20] \n"
"    BL      sub_FF8BFC24 \n"
"    LDR     R0, [SP, #0x20] \n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R2, [R0, #0x98] \n"
"    LDR     R3, [R0, #0x94] \n"
"    B       loc_FF8BE994 \n"

"loc_FF8BE680:\n"
"    CMP     R1, #0x14 \n"
"    CMPNE   R1, #0x15 \n"
"    CMPNE   R1, #0x16 \n"
"    CMPNE   R1, #0x17 \n"
"    BNE     loc_FF8BE738 \n"
"    ADD     R3, SP, #0x10 \n"
"    ADD     R2, SP, #4 \n"
"    ADD     R1, SP, #0x14 \n"
"    BL      sub_FF8BCC74 \n"
"    CMP     R0, #1 \n"
"    MOV     R9, R0 \n"
"    CMPNE   R9, #5 \n"
"    BNE     loc_FF8BE6D4 \n"
"    LDR     R0, [SP, #0x20] \n"
"    MOV     R2, R9 \n"
"    LDR     R1, [R0, #0x7C]! \n"
"    LDR     R12, [R0, #0x10]! \n"
"    LDR     R3, [R0, #4] \n"
"    ADD     R0, SP, #4 \n"
"    BLX     R12 \n"
"    B       loc_FF8BE70C \n"

"loc_FF8BE6D4:\n"
"    LDR     R0, [SP, #0x20] \n"
"    CMP     R9, #2 \n"
"    LDR     R3, [R0, #0x90] \n"
"    CMPNE   R9, #6 \n"
"    BNE     loc_FF8BE720 \n"
"    LDR     R12, [R0, #0x8C] \n"
"    MOV     R2, R9 \n"
"    MOV     R1, #1 \n"
"    ADD     R0, SP, #4 \n"
"    BLX     R12 \n"
"    LDR     R0, [SP, #0x20] \n"
"    ADD     R2, SP, #4 \n"
"    ADD     R1, SP, #0x14 \n"
"    BL      sub_FF8BE0E8 \n"

"loc_FF8BE70C:\n"
"    LDR     R0, [SP, #0x20] \n"
"    LDR     R2, [SP, #0x10] \n"
"    MOV     R1, R9 \n"
"    BL      sub_FF8BE33C \n"
"    B       loc_FF8BE99C \n"

"loc_FF8BE720:\n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R12, [R0, #0x8C] \n"
"    MOV     R2, R9 \n"
"    ADD     R0, R0, #4 \n"
"    BLX     R12 \n"
"    B       loc_FF8BE99C \n"

"loc_FF8BE738:\n"
"    CMP     R1, #0x23 \n"
"    CMPNE   R1, #0x24 \n"
"    BNE     loc_FF8BE784 \n"
"    LDR     R1, [R0, #0x7C] \n"
"    ADD     R1, R1, R1, LSL#1 \n"
"    ADD     R1, R0, R1, LSL#2 \n"
"    SUB     R1, R1, #8 \n"
"    LDMIA   R1, {R2,R3,R9} \n"
"    STMIA   R5, {R2,R3,R9} \n"
"    BL      sub_FF8BBA88 \n"
"    LDR     R0, [SP, #0x20] \n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R3, [R0, #0x8C] \n"
"    LDR     R2, [R0, #0x90] \n"
"    ADD     R0, R0, #4 \n"
"    BLX     R3 \n"
"    LDR     R0, [SP, #0x20] \n"
"    BL      sub_FF8BBEC4 \n"
"    B       loc_FF8BE99C \n"

"loc_FF8BE784:\n"
"    ADD     R1, R0, #4 \n"
"    LDMIA   R1, {R2,R3,R9} \n"
"    STMIA   R5, {R2,R3,R9} \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #0x27 \n"
"    ADDCC   PC, PC, R1, LSL#2 \n"
"    B       loc_FF8BE984 \n"
"    B       loc_FF8BE83C \n"
"    B       loc_FF8BE83C \n"
"    B       loc_FF8BE844 \n"
"    B       loc_FF8BE84C \n"
"    B       loc_FF8BE84C \n"
"    B       loc_FF8BE84C \n"
"    B       loc_FF8BE83C \n"
"    B       loc_FF8BE844 \n"
"    B       loc_FF8BE84C \n"
"    B       loc_FF8BE84C \n"
"    B       loc_FF8BE864 \n"
"    B       loc_FF8BE864 \n"
"    B       loc_FF8BE970 \n"
"    B       loc_FF8BE978 \n"
"    B       loc_FF8BE978 \n"
"    B       loc_FF8BE978 \n"
"    B       loc_FF8BE978 \n"
"    B       loc_FF8BE980 \n"
"    B       loc_FF8BE984 \n"
"    B       loc_FF8BE984 \n"
"    B       loc_FF8BE984 \n"
"    B       loc_FF8BE984 \n"
"    B       loc_FF8BE984 \n"
"    B       loc_FF8BE984 \n"
"    B       loc_FF8BE854 \n"
"    B       loc_FF8BE85C \n"
"    B       loc_FF8BE85C \n"
"    B       loc_FF8BE870 \n"
"    B       loc_FF8BE870 \n"
"    B       loc_FF8BE878 \n"
"    B       loc_FF8BE8B0 \n"
"    B       loc_FF8BE8E8 \n"
"    B       loc_FF8BE920 \n"
"    B       loc_FF8BE958 \n"
"    B       loc_FF8BE958 \n"
"    B       loc_FF8BE984 \n"
"    B       loc_FF8BE984 \n"
"    B       loc_FF8BE960 \n"
"    B       loc_FF8BE968 \n"

"loc_FF8BE83C:\n"
"    BL      sub_FF8BA528 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE844:\n"
"    BL      sub_FF8BA7CC \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE84C:\n"
"    BL      sub_FF8BA9F4 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE854:\n"
"    BL      sub_FF8BACCC \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE85C:\n"
"    BL      sub_FF8BAEE4 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE864:\n"
"    BL      sub_FF8BB264_my \n"  // --> Patched. Old value = 0xFF8BB264.
"    MOV     R8, #0 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE870:\n"
"    BL      sub_FF8BB3AC \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE878:\n"
"    LDRH    R1, [R0, #4] \n"
"    STRH    R1, [SP, #0x14] \n"
"    LDRH    R1, [R4, #2] \n"
"    STRH    R1, [SP, #0x16] \n"
"    LDRH    R1, [R4, #4] \n"
"    STRH    R1, [SP, #0x18] \n"
"    LDRH    R1, [R4, #6] \n"
"    STRH    R1, [SP, #0x1A] \n"
"    LDRH    R1, [R0, #0xC] \n"
"    STRH    R1, [SP, #0x1C] \n"
"    LDRH    R1, [R4, #0xA] \n"
"    STRH    R1, [SP, #0x1E] \n"
"    BL      sub_FF8BF91C \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE8B0:\n"
"    LDRH    R1, [R0, #4] \n"
"    STRH    R1, [SP, #0x14] \n"
"    LDRH    R1, [R4, #2] \n"
"    STRH    R1, [SP, #0x16] \n"
"    LDRH    R1, [R4, #4] \n"
"    STRH    R1, [SP, #0x18] \n"
"    LDRH    R1, [R4, #6] \n"
"    STRH    R1, [SP, #0x1A] \n"
"    LDRH    R1, [R4, #8] \n"
"    STRH    R1, [SP, #0x1C] \n"
"    LDRH    R1, [R4, #0xA] \n"
"    STRH    R1, [SP, #0x1E] \n"
"    BL      sub_FF8BFA24 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE8E8:\n"
"    LDRH    R1, [R4] \n"
"    STRH    R1, [SP, #0x14] \n"
"    LDRH    R1, [R0, #6] \n"
"    STRH    R1, [SP, #0x16] \n"
"    LDRH    R1, [R4, #4] \n"
"    STRH    R1, [SP, #0x18] \n"
"    LDRH    R1, [R4, #6] \n"
"    STRH    R1, [SP, #0x1A] \n"
"    LDRH    R1, [R4, #8] \n"
"    STRH    R1, [SP, #0x1C] \n"
"    LDRH    R1, [R4, #0xA] \n"
"    STRH    R1, [SP, #0x1E] \n"
"    BL      sub_FF8BFAD8 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE920:\n"
"    LDRH    R1, [R4] \n"
"    STRH    R1, [SP, #0x14] \n"
"    LDRH    R1, [R4, #2] \n"
"    STRH    R1, [SP, #0x16] \n"
"    LDRH    R1, [R4, #4] \n"
"    STRH    R1, [SP, #0x18] \n"
"    LDRH    R1, [R4, #6] \n"
"    STRH    R1, [SP, #0x1A] \n"
"    LDRH    R1, [R0, #0xC] \n"
"    STRH    R1, [SP, #0x1C] \n"
"    LDRH    R1, [R4, #0xA] \n"
"    STRH    R1, [SP, #0x1E] \n"
"    BL      sub_FF8BFB80 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE958:\n"
"    BL      sub_FF8BB87C \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE960:\n"
"    BL      sub_FF8BBFC8 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE968:\n"
"    BL      sub_FF8BC270 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE970:\n"
"    BL      sub_FF8BC450 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE978:\n"
"    BL      sub_FF8BC694 \n"
"    B       loc_FF8BE984 \n"

"loc_FF8BE980:\n"
"    BL      sub_FF8BC804 \n"

"loc_FF8BE984:\n"
"    LDR     R0, [SP, #0x20] \n"
"    LDR     R1, [R0, #0x7C] \n"
"    LDR     R2, [R0, #0x90] \n"
"    LDR     R3, [R0, #0x8C] \n"

"loc_FF8BE994:\n"
"    ADD     R0, R0, #4 \n"
"    BLX     R3 \n"

"loc_FF8BE99C:\n"
"    LDR     R1, [SP, #0x20] \n"
"    LDR     R0, [R1] \n"
"    CMP     R0, #0x10 \n"
"    BEQ     loc_FF8BE9D4 \n"
"    BGT     loc_FF8BE9C4 \n"
"    CMP     R0, #1 \n"
"    CMPNE   R0, #4 \n"
"    CMPNE   R0, #0xE \n"
"    BNE     loc_FF8BE9E4 \n"
"    B       loc_FF8BE9D4 \n"

"loc_FF8BE9C4:\n"
"    CMP     R0, #0x13 \n"
"    CMPNE   R0, #0x17 \n"
"    CMPNE   R0, #0x1A \n"
"    BNE     loc_FF8BE9E4 \n"

"loc_FF8BE9D4:\n"
"    LDRH    R0, [R4] \n"
"    STRH    R0, [SP, #0x14] \n"
"    LDRH    R0, [R4, #8] \n"
"    STRH    R0, [SP, #0x1C] \n"

"loc_FF8BE9E4:\n"
"    CMP     R8, #1 \n"
"    BNE     loc_FF8BEA30 \n"
"    LDR     R0, [R1, #0x7C] \n"
"    MOV     R2, #0xC \n"
"    ADD     R0, R0, R0, LSL#1 \n"
"    ADD     R0, R1, R0, LSL#2 \n"
"    SUB     R8, R0, #8 \n"
"    LDR     R0, =0x55794 \n"
"    ADD     R1, SP, #0x14 \n"
"    BL      sub_FFB58820 \n"
"    LDR     R0, =0x557A0 \n"
"    MOV     R2, #0xC \n"
"    ADD     R1, SP, #0x14 \n"
"    BL      sub_FFB58820 \n"
"    LDR     R0, =0x557AC \n"
"    MOV     R2, #0xC \n"
"    MOV     R1, R8 \n"
"    BL      sub_FFB58820 \n"
"    B       loc_FF8BEAA8 \n"

"loc_FF8BEA30:\n"
"    LDR     R0, [R1] \n"
"    MOV     R3, #1 \n"
"    CMP     R0, #0xB \n"
"    BNE     loc_FF8BEA74 \n"
"    MOV     R2, #0 \n"
"    STRD    R2, [SP] \n"
"    MOV     R2, R3 \n"
"    MOV     R1, R3 \n"
"    MOV     R0, #0 \n"
"    BL      sub_FF8BA308 \n"
"    MOV     R3, #1 \n"
"    MOV     R2, #0 \n"
"    STRD    R2, [SP] \n"
"    MOV     R2, R3 \n"
"    MOV     R1, R3 \n"
"    MOV     R0, #0 \n"
"    B       loc_FF8BEAA4 \n"

"loc_FF8BEA74:\n"
"    MOV     R2, #1 \n"
"    STRD    R2, [SP] \n"
"    MOV     R3, R2 \n"
"    MOV     R1, R2 \n"
"    MOV     R0, R2 \n"
"    BL      sub_FF8BA308 \n"
"    MOV     R3, #1 \n"
"    MOV     R2, R3 \n"
"    MOV     R1, R3 \n"
"    MOV     R0, R3 \n"
"    STR     R3, [SP] \n"
"    STR     R3, [SP, #4] \n"

"loc_FF8BEAA4:\n"
"    BL      sub_FF8BA474 \n"

"loc_FF8BEAA8:\n"
"    LDR     R0, [SP, #0x20] \n"
"    BL      sub_FF8BF888 \n"
"    B       loc_FF8BE40C \n"
);
}

/*************************************************************/
//** sub_FF8BB264_my @ 0xFF8BB264 - 0xFF8BB32C, length=51
void __attribute__((naked,noinline)) sub_FF8BB264_my() {
asm volatile (
"    STMFD   SP!, {R4-R8,LR} \n"
"    LDR     R7, =0x3EB0 \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R7, #0x1C] \n"
"    MOV     R1, #0x3E \n"
"    BL      sub_FF884DB8 /*_ClearEventFlag*/ \n"
"    MOV     R2, #0 \n"
"    LDRSH   R0, [R4, #4] \n"
"    MOV     R1, R2 \n"
"    BL      sub_FF8BA010 \n"
"    MOV     R5, R0 \n"
"    LDRSH   R0, [R4, #6] \n"
"    BL      sub_FF8BA160 \n"
"    LDRSH   R0, [R4, #8] \n"
"    BL      sub_FF8BA1B8 \n"
"    LDRSH   R0, [R4, #0xA] \n"
"    BL      sub_FF8BA210 \n"
"    LDRSH   R0, [R4, #0xC] \n"
"    MOV     R1, #0 \n"
"    BL      sub_FF8BA268 \n"
"    MOV     R6, R0 \n"
"    LDRSH   R0, [R4, #0xE] \n"
"    BL      sub_FF8BF8B8 \n"
"    LDR     R0, [R4] \n"
"    LDR     R8, =0x557AC \n"
"    CMP     R0, #0xB \n"
"    MOVEQ   R5, #0 \n"
"    MOVEQ   R6, R5 \n"
"    BEQ     loc_FF8BB300 \n"
"    CMP     R5, #1 \n"
"    BNE     loc_FF8BB300 \n"
"    LDRSH   R0, [R4, #4] \n"
"    LDR     R1, =0xFF8B9F70 \n"
"    MOV     R2, #2 \n"
"    BL      sub_FF961B38 \n"
"    STRH    R0, [R4, #4] \n"
"    MOV     R0, #0 \n"
"    STR     R0, [R7, #0x28] \n"
"    B       loc_FF8BB308 \n"

"loc_FF8BB300:\n"
"    LDRH    R0, [R8] \n"
"    STRH    R0, [R4, #4] \n"

"loc_FF8BB308:\n"
"    CMP     R6, #1 \n"
"    LDRNEH  R0, [R8, #8] \n"
"    BNE     loc_FF8BB324 \n"
"    LDRSH   R0, [R4, #0xC] \n"
"    LDR     R1, =0xFF8B9FF4 \n"
"    MOV     R2, #0x20 \n"
"    BL      sub_FF8BF8D8 \n"

"loc_FF8BB324:\n"
"    STRH    R0, [R4, #0xC] \n"
"    LDRSH   R0, [R4, #6] \n"
"    BL      sub_FF8AC12C_my \n"  // --> Patched. Old value = 0xFF8AC12C.
"    LDR     PC, =0xFF8BB330 \n"  // Continue in firmware
);
}

/*************************************************************/
//** sub_FF8AC12C_my @ 0xFF8AC12C - 0xFF8AC194, length=27
void __attribute__((naked,noinline)) sub_FF8AC12C_my() {
asm volatile (
"    STMFD   SP!, {R4-R6,LR} \n"
"    LDR     R5, =0x3B74 \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R5, #4] \n"
"    CMP     R0, #1 \n"
"    LDRNE   R1, =0x146 \n"
"    LDRNE   R0, =0xFF8ABF64 \n"
"    BLNE    _DebugAssert \n"
"    CMN     R4, #0xC00 \n"
"    LDREQSH R4, [R5, #2] \n"
"    CMN     R4, #0xC00 \n"
"    MOVEQ   R1, #0x14C \n"
"    LDREQ   R0, =0xFF8ABF64 \n"
"    STRH    R4, [R5, #2] \n"
"    BLEQ    _DebugAssert \n"
"    MOV     R0, R4 \n"
"    BL      apex2us \n"  // --> Patched. Old value = _apex2us.
"    MOV     R4, R0 \n"
//"  BL      _sub_FF8F7E60 \n"  // --> Nullsub call removed.
"    MOV     R0, R4 \n"
"    BL      sub_FF900E9C \n"
"    TST     R0, #1 \n"
"    LDMEQFD SP!, {R4-R6,PC} \n"
"    LDMFD   SP!, {R4-R6,LR} \n"
"    LDR     R1, =0x151 \n"
"    LDR     R0, =0xFF8ABF64 \n"
"    B       _DebugAssert \n"
);
}
