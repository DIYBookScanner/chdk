// !!! THIS FILE IS GENERATED. DO NOT EDIT. !!!
#include "stubs_asm.h"

// Camera info:
//   Firmware Ver GM1.00D   // Found @ 0xffc07c40, "GM1.00D" @ 0xffc07c4d
//   Firmware build timestamp: Dec  1 2006 17:58:01
//   Possible corrupt firmware dump - file size too small for start address 0xffc00000
//     file size = 3.95MB, should be 4.00MB
//   Canon PowerShot A450

// Values for makefile.inc
//   PLATFORMID = 12629 (0x3155) // Found @ 0xfffe0130
//   MAXRAMADDR = 0x00ffffff
//   MEMISOSTART = 0x00095730

// Stubs below should be checked. Stub not matched 100%, or difference found to current 'stubs_entry_2.S'
//    Name                                     Address      Rule  %  Comp to stubs_entry_2.S
NHSTUB(EnterToCompensationEVF                 ,0xffe6b110) //  3 96%
NHSTUB(FreeUncacheableMemory                  ,0xffc0e0dc) //  1 90%
NHSTUB(GetFocusLensSubjectDistance            ,0xffe42fe8) //  1 83%
NHSTUB(GetFocusLensSubjectDistanceFromLens    ,0xffe434ec) //  2 92%
NHSTUB(GetParameterData                       ,0xffea9758) //  1 86%
NHSTUB(GetPropertyCase                        ,0xffc0b79c) //  2 89%
NHSTUB(GetSystemTime                          ,0xffc03398) //  1 96%
NHSTUB(PutInNdFilter                          ,0xffddc35c) //  1 92%
NHSTUB(PutOutNdFilter                         ,0xffddc3a4) //  1 94%
//NHSTUB(Remove                               ,0xffd4892c) //  3 52%
NHSTUB(Restart                                ,0xffc0b250) //  1 96%
NHSTUB(SetFileAttributes                      ,0xffe1da0c) //  1 65%
NHSTUB(SetParameterData                       ,0xffea9678) //  1 86%
NHSTUB(SetPropertyCase                        ,0xffc0b664) //  3 96%
NHSTUB(UnsetZoomForMovie                      ,0xffc22b44) //  1 89%
NHSTUB(WriteSDCard                            ,0xffe2f99c) //  3 74%
NHSTUB(add_ptp_handler                        ,0xffd7c07c) //  1 96%
NHSTUB(exmem_alloc                            ,0xffc0ddb4) //  2 93%
// ERROR: free is not found.                               //--- ---    *** != 0xffccc768
NHSTUB(kbd_p2_f                               ,0xffdc4004) //  1 56%
NHSTUB(kbd_read_keys_r2                       ,0xffdc4ad8) //  3 95%
//NHSTUB(kbd_pwr_off                          ,0xffdc2fb0) //  1 83%    *** != 0x00000000
// ALT: NHSTUB(kbd_pwr_off, 0xffdc2fcc) // 1 5/1
//NHSTUB(kbd_pwr_on                           ,0xffdbb868) //  1 55%    *** != 0x00000000
// ALT: NHSTUB(kbd_pwr_on, 0xffdbb894) // 1 5/4
NHSTUB(malloc                                 ,0xffccc75c) //  1 53%
NHSTUB(mkdir                                  ,0xffe1da3c) //  1 54%
// ALT: NHSTUB(mkdir, 0xffe1db04) // 1 17/14
NHSTUB(taskIdListGet                          ,0xffcd68a4) //  1 82%
NHSTUB(utime                                  ,0xffebfc30) //  1 57%
NHSTUB(localtime                              ,0xffcc5574) //  1 93%
NHSTUB(Mount_FileSystem                       ,0xffe1cb08) //  3 93%
NHSTUB(MakeAFScan                             ,0xffe7003c) //  2 86%

// Check of modemap from 'platform/CAMERA/shooting.c':
// Firmware modemap table found @ffeab878 -> ffeab878
// Mode 33290 in firmware but not in current modemap

// Values below can be overridden in 'stubs_min.S':
//DEF(levent_table                            ,0xffe9eca0) // Found @0xffe9eca0,          stubs_min = 0xffe9eca0 (0xFFE9ECA0)
//DEF(FlashParamsTable                        ,0xffeada74) // Found @0xffeada74,          stubs_min = 0xffeada74 (0xFFEADA74)

// Values below go in 'lib.c':
//int get_flash_params_count(void) { return 0x6f; }                          // Found @0xffea97c4

// Misc stuff
// LED table init @ 0xffdc3924
// LED #1: 0xc022008c, offset 0x4
// LED #2: 0xc0220088, offset 0x44
// LED #3: 0xc0220090, offset 0x84
// LED #4: 0xc0220084, offset 0x204
// LED #5: 0xc0220080, offset 0x244

// canon_data_src: 0xffeef370, canon_data_len: 0xcb60

// Stubs below matched 100%.
//    Name                                     Address                Comp to stubs_entry_2.S
NHSTUB(AllocateUncacheableMemory              ,0xffc0e0a8) //  1
NHSTUB(Close                                  ,0xffe1d7e4) //120
NHSTUB(CreateTask                             ,0xffe83550) //120
NHSTUB(DebugAssert                            ,0xffe8f45c) //1100
NHSTUB(DeleteFile_Fut                         ,0xffe18dbc) //  1
NHSTUB(DoAELock                               ,0xffe6b29c) //120
NHSTUB(DoAFLock                               ,0xffe6aedc) //120
NHSTUB(ExecuteEventProcedure                  ,0xffc04670) //  1
NHSTUB(ExitFromCompensationEVF                ,0xffe6b194) //  3
NHSTUB(ExitTask                               ,0xffe83910) //120
NHSTUB(Fclose_Fut                             ,0xffe18f30) //120
NHSTUB(Feof_Fut                               ,0xffe1912c) //  3
NHSTUB(Fflush_Fut                             ,0xffe19168) //  3
NHSTUB(Fgets_Fut                              ,0xffe19094) //  3
NHSTUB(Fopen_Fut                              ,0xffe18ef0) //120
NHSTUB(Fread_Fut                              ,0xffe18fec) //120
NHSTUB(Fseek_Fut                              ,0xffe190e0) //120
NHSTUB(Fwrite_Fut                             ,0xffe19040) //120
//NHSTUB(GetBatteryTemperature                ,0xffdc7d94) //102            == 0xffdc7d94
NHSTUB(GetCCDTemperature                      ,0xffdc7d80) //102
NHSTUB(GetCurrentAvValue                      ,0xffddc178) //120
NHSTUB(GetDrive_ClusterSize                   ,0xffe1cfd0) //119
NHSTUB(GetDrive_FreeClusters                  ,0xffe1d048) //1103
NHSTUB(GetDrive_TotalClusters                 ,0xffe1d00c) //119
NHSTUB(GetOpticalTemperature                  ,0xffdc7d6c) //120
NHSTUB(GetZoomLensCurrentPoint                ,0xffe55054) //120
NHSTUB(GetZoomLensCurrentPosition             ,0xffe55068) //102
NHSTUB(GiveSemaphore                          ,0xffe8311c) //120
NHSTUB(IsStrobeChargeCompleted                ,0xffd45b60) //  2
NHSTUB(LEDDrive                               ,0xffdc3538) //120
NHSTUB(LocalTime                              ,0xffe8fd70) //115
NHSTUB(LockMainPower                          ,0xffea65f4) //120
NHSTUB(MakeDirectory_Fut                      ,0xffe18e70) //  3
NHSTUB(MoveFocusLensToDistance                ,0xffdde788) //102
NHSTUB(MoveIrisWithAv                         ,0xffe49cc4) //120
NHSTUB(MoveZoomLensWithPoint                  ,0xffe54f2c) //120
NHSTUB(Open                                   ,0xffe1d7bc) //120
NHSTUB(PT_MoveDigitalZoomToWide               ,0xffe7af44) //120
NHSTUB(PT_MoveOpticalZoomAt                   ,0xffe7af08) //120
NHSTUB(PT_PlaySound                           ,0xffe7aa08) //  3
NHSTUB(PostLogicalEventForNotPowerType        ,0xffea220c) //120
NHSTUB(PostLogicalEventToUI                   ,0xffea2288) //120
NHSTUB(Read                                   ,0xffe1d878) //120
NHSTUB(RefreshPhysicalScreen                  ,0xffcb9188) //120
NHSTUB(RenameFile_Fut                         ,0xffe18d14) //  3
NHSTUB(SetAE_ShutterSpeed                     ,0xffde17bc) //102
NHSTUB(SetAutoShutdownTime                    ,0xffea64f8) //120
NHSTUB(SetCurrentCaptureModeType              ,0xffc17b90) //120
NHSTUB(SetLogicalEventActive                  ,0xffea4104) //1104
//NHSTUB(SetScriptMode                        ,0xffea416c) //120            == 0xffea416c
NHSTUB(SleepTask                              ,0xffe83464) //120
NHSTUB(TakeSemaphore                          ,0xffe82f14) //1101
NHSTUB(TurnOffBackLight                       ,0xffc2e3e8) //  2
NHSTUB(TurnOnBackLight                        ,0xffc2e3b8) //  2
NHSTUB(TurnOnDisplay                          ,0xffdb9638) //120
NHSTUB(TurnOffDisplay                         ,0xffdb9648) //120
NHSTUB(UnlockAE                               ,0xffe6b2ec) //120
NHSTUB(UnlockAF                               ,0xffe6af5c) //120
NHSTUB(UnlockMainPower                        ,0xffea668c) //120
NHSTUB(UpdateMBROnFlash                       ,0xffe1cd04) //  1
NHSTUB(VbattGet                               ,0xffdc17b8) //120
NHSTUB(Write                                  ,0xffe1d884) //120
NHSTUB(_log                                   ,0xffebe414) //121
NHSTUB(_log10                                 ,0xffebd894) //121
NHSTUB(_pow                                   ,0xffcbd0cc) //121
NHSTUB(_sqrt                                  ,0xffcbee54) //  1
NHSTUB(apex2us                                ,0xffcddbe4) //  1
NHSTUB(close                                  ,0xffcc971c) //109
NHSTUB(exmem_free                             ,0xffc0e004) //102
NHSTUB(kbd_p1_f                               ,0xffdc3bdc) //  1
NHSTUB(kbd_p1_f_cont                          ,0xffdc3be8) //109
NHSTUB(lseek                                  ,0xffcc9860) //  1
NHSTUB(memcmp                                 ,0xffcc4954) //120
NHSTUB(memcpy                                 ,0xffcc4990) //120
NHSTUB(memset                                 ,0xffcc4a08) //120
NHSTUB(open                                   ,0xffcc9d60) //109
NHSTUB(closedir                               ,0xffebfad4) //  1
NHSTUB(qsort                                  ,0xffcc41b4) //  1
NHSTUB(rand                                   ,0xffcc41d8) //  1
NHSTUB(realloc                                ,0xffe8f068) //115
NHSTUB(srand                                  ,0xffcc41fc) //  1
NHSTUB(stat                                   ,0xffebfb9c) //  1
NHSTUB(strcat                                 ,0xffcc4a28) //  1
NHSTUB(strchr                                 ,0xffcc4a54) //  1
NHSTUB(strcmp                                 ,0xffcc4a78) //120
NHSTUB(strcpy                                 ,0xffcc4c0c) //120
NHSTUB(strftime                               ,0xffcc6294) //  1
NHSTUB(strlen                                 ,0xffcc4d70) //120
NHSTUB(strncmp                                ,0xffcc4dd4) //  1
NHSTUB(strncpy                                ,0xffcc4e18) //  1
NHSTUB(strrchr                                ,0xffcc4e9c) //  1
NHSTUB(strtol                                 ,0xffcc45f0) //  1
NHSTUB(isdigit                                ,0xffcc0d24) //  1
NHSTUB(isspace                                ,0xffcc0d9c) //  1
NHSTUB(isalpha                                ,0xffcc0cf4) //  1
NHSTUB(isupper                                ,0xffcc0db4) //  1
NHSTUB(islower                                ,0xffcc0d54) //  1
NHSTUB(ispunct                                ,0xffcc0d84) //  1
NHSTUB(isxdigit                               ,0xffcc0dcc) //  1
NHSTUB(toupper                                ,0xffcc0df4) //  1
NHSTUB(tolower                                ,0xffcc0de4) //  1
NHSTUB(taskLock                               ,0xffcd6f60) //  1
NHSTUB(taskUnlock                             ,0xffcd7008) //  1
NHSTUB(taskName                               ,0xffcd679c) //  1
NHSTUB(errnoOfTaskGet                         ,0xffcc7370) //  1
NHSTUB(readdir                                ,0xffebfaa0) //  1
NHSTUB(strtoul                                ,0xffcc4798) //  1
NHSTUB(strpbrk                                ,0xffcc4e60) //  1
NHSTUB(mktime                                 ,0xffcc573c) //  1
NHSTUB(opendir                                ,0xffebfb08) //  1
NHSTUB(memchr                                 ,0xffcc4920) //  1
NHSTUB(memPartInfoGet                         ,0xffcccb7c) //  1
NHSTUB(iosDrvInstall                          ,0xffccac00) //  1
NHSTUB(iosDevAdd                              ,0xffcca93c) //  1
NHSTUB(iosDevDelete                           ,0xffcca914) //  1
NHSTUB(GetCurrentTargetDistance               ,0xffdde4f0) //  1
NHSTUB(taskCreateHookAdd                      ,0xffccf3bc) //  1
NHSTUB(taskDeleteHookAdd                      ,0xffccf2f8) //  1
NHSTUB(Unmount_FileSystem                     ,0xffe1cbb0) //  1
NHSTUB(taskSuspend                            ,0xffcd69ac) //  1
NHSTUB(taskResume                             ,0xffcd6b80) //  1
NHSTUB(time                                   ,0xffcc62c0) //  1
NHSTUB(vsprintf                               ,0xffcc84c4) //115
NHSTUB(EngDrvRead                             ,0xffdcd674) //102
