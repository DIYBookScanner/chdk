/*
 * filewrite.c - auto-generated by CHDK code_gen.
 */
#include "lolevel.h"
#include "platform.h"

typedef struct {
    unsigned int address;
    unsigned int length;
} cam_ptp_data_chunk; //camera specific structure

#define MAX_CHUNKS_FOR_JPEG 4 // filewritetask is prepared for this many chunks
/*
 * fwt_data_struct: defined here as it's camera dependent
 * unneeded members are designated with unkn
 * file_offset, full_size, seek_flag only needs to be defined for DryOS>=r50 generation cameras
 * pdc is always required
 * name is not currently used
 */
typedef struct
{
    int unkn1[5];
    cam_ptp_data_chunk pdc[MAX_CHUNKS_FOR_JPEG];
    int unkn6;
    char name[32];                               // open stage: sub_FFDE69C0 (1.00f) --> "ADD     R0, R0, #0x38"
                                                 // offset of 'name' from start = 0x38 = 56 bytes = 14 words
} fwt_data_struct;

#include "../../../generic/filewrite.c"

/*************************************************************/
//** filewritetask @ 0xFFDE66CC - 0xFFDE67B0, length=58
void __attribute__((naked,noinline)) filewritetask() {
asm volatile (
"    STMFD   SP!, {R1-R5,LR} \n"
"    LDR     R4, =0x8428 \n"

"loc_FFDE66D4:\n"
"    LDR     R0, [R4, #0x10] \n"
"    MOV     R2, #0 \n"
"    ADD     R1, SP, #8 \n"
"    BL      sub_FFC28AA0 /*_ReceiveMessageQueue*/ \n"
"    CMP     R0, #0 \n"
"    BNE     loc_FFDE6704 \n"
"    LDR     R0, [SP, #8] \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #1 \n"
"    BNE     loc_FFDE670C \n"
"    LDR     R0, [R4, #8] \n"
"    BL      _GiveSemaphore \n"

"loc_FFDE6704:\n"
"    BL      _ExitTask \n"
"    LDMFD   SP!, {R1-R5,PC} \n"

"loc_FFDE670C:\n"
"    SUB     R1, R1, #2 \n"
"    CMP     R1, #6 \n"
"    ADDLS   PC, PC, R1, LSL#2 \n"
"    B       loc_FFDE66D4 \n"
"    B       loc_FFDE6738 \n"
"    B       loc_FFDE679C \n"
"    B       loc_FFDE67A4 \n"
"    B       loc_FFDE67A4 \n"
"    B       loc_FFDE67A4 \n"
"    B       loc_FFDE67A4 \n"
"    B       loc_FFDE67AC \n"

"loc_FFDE6738:\n"
"    MOV     R0, #0 \n"
"    STR     R0, [SP] \n"

"loc_FFDE6740:\n"
"    LDR     R0, [R4, #0x10] \n"
"    MOV     R1, SP \n"
"    BL      sub_FFC28CE4 /*_GetNumberOfPostedMessages*/ \n"
"    LDR     R0, [SP] \n"
"    CMP     R0, #0 \n"
"    BEQ     loc_FFDE676C \n"
"    LDR     R0, [R4, #0x10] \n"
"    MOV     R2, #0 \n"
"    ADD     R1, SP, #4 \n"
"    BL      sub_FFC28AA0 /*_ReceiveMessageQueue*/ \n"
"    B       loc_FFDE6740 \n"

"loc_FFDE676C:\n"
"    LDR     R0, [R4] \n"
"    CMN     R0, #1 \n"
"    BEQ     loc_FFDE6790 \n"
"    BL      fwt_close \n"  // --> Patched. Old value = _Close.
"    MVN     R0, #0 \n"
"    STR     R0, [R4] \n"
"    LDR     R0, =0xBF334 \n"
"    BL      sub_FFC514AC \n"
"    BL      sub_FFC4F748 \n"

"loc_FFDE6790:\n"
"    LDR     R0, [R4, #0xC] \n"
"    BL      _GiveSemaphore \n"
"    B       loc_FFDE66D4 \n"

"loc_FFDE679C:\n"
"    BL      sub_FFDE69BC_my \n"  // --> Patched. Old value = 0xFFDE69BC. Open stage
"    B       loc_FFDE66D4 \n"

"loc_FFDE67A4:\n"
"    BL      sub_FFDE6AF0_my \n"  // --> Patched. Old value = 0xFFDE6AF0. Write stage
"    B       loc_FFDE66D4 \n"

"loc_FFDE67AC:\n"
"    BL      sub_FFDE6558_my \n"  // --> Patched. Old value = 0xFFDE6558. Close stage
"    B       loc_FFDE66D4 \n"
);
}

/*************************************************************/
//** sub_FFDE69BC_my @ 0xFFDE69BC - 0xFFDE69FC, length=17
void __attribute__((naked,noinline)) sub_FFDE69BC_my() {
asm volatile (
"    STMFD   SP!, {R4-R8,LR} \n"
"    MOV     R4, R0 \n"
"    ADD     R0, R0, #0x38 \n"
"    SUB     SP, SP, #0x38 \n"
"    BL      sub_FFC514AC \n"
"    MOV     R1, #0 \n"
"    BL      sub_FFC4F6F8 \n"
"    LDR     R0, [R4, #0xC] \n"
"    BL      sub_FFC0033C \n"
"    LDR     R7, [R4, #8] \n"
"    LDR     R8, =0x1B6 \n"
"    ADD     R6, R4, #0x38 \n"
"    LDR     R5, [R4, #0xC] \n"
//hook start
// "    STMFD SP!, {R4-R12,LR}\n"
"    MOV R0, R4\n"
"    BL filewrite_main_hook\n"
// "    LDMFD SP!, {R4-R12,LR}\n"
//hook end
"    MOV     R0, R6 \n"
"    MOV     R1, R7 \n"
"    MOV     R2, R8 \n"
"    BL      fwt_open \n"  // --> Patched. Old value = _Open.
"    LDR     PC, =0xFFDE6A00 \n"  // Continue in firmware
);
}

/*************************************************************/
//** sub_FFDE6AF0_my @ 0xFFDE6AF0 - 0xFFDE6BF8, length=67
void __attribute__((naked,noinline)) sub_FFDE6AF0_my() {
asm volatile (
"    STMFD   SP!, {R4-R10,LR} \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R0] \n"
"    CMP     R0, #4 \n"
"    LDREQ   R6, [R4, #0x18] \n"
"    LDREQ   R7, [R4, #0x14] \n"
"    BEQ     loc_FFDE6B3C \n"
"    CMP     R0, #5 \n"
"    LDREQ   R6, [R4, #0x20] \n"
"    LDREQ   R7, [R4, #0x1C] \n"
"    BEQ     loc_FFDE6B3C \n"
"    CMP     R0, #6 \n"
"    LDREQ   R6, [R4, #0x28] \n"
"    LDREQ   R7, [R4, #0x24] \n"
"    BEQ     loc_FFDE6B3C \n"
"    CMP     R0, #7 \n"
"    BNE     loc_FFDE6B50 \n"
"    LDR     R6, [R4, #0x30] \n"
"    LDR     R7, [R4, #0x2C] \n"

"loc_FFDE6B3C:\n"
"    CMP     R6, #0 \n"
"    BNE     loc_FFDE6B60 \n"

"loc_FFDE6B44:\n"
"    MOV     R1, R4 \n"
"    MOV     R0, #8 \n"
"    B       loc_FFDE6BF4 \n"

"loc_FFDE6B50:\n"
"    LDR     R1, =0x29F \n"
"    LDR     R0, =0xFFDE67C4 \n"
"    BL      _DebugAssert \n"
"    B       loc_FFDE6B44 \n"

"loc_FFDE6B60:\n"
"    LDR     R9, =0x8428 \n"
"    MOV     R5, R6 \n"

"loc_FFDE6B68:\n"
"    LDR     R0, [R4, #4] \n"
"    CMP     R5, #0x1000000 \n"
"    MOVLS   R8, R5 \n"
"    MOVHI   R8, #0x1000000 \n"
"    BIC     R1, R0, #0xFF000000 \n"
"    CMP     R1, #0 \n"
"    BICNE   R0, R0, #0xFF000000 \n"
"    RSBNE   R0, R0, #0x1000000 \n"
"    CMPNE   R8, R0 \n"
"    MOVHI   R8, R0 \n"
"    LDR     R0, [R9] \n"
"    MOV     R2, R8 \n"
"    MOV     R1, R7 \n"
"    BL      fwt_write \n"  // --> Patched. Old value = _Write.
"    LDR     R1, [R4, #4] \n"
"    CMP     R8, R0 \n"
"    ADD     R1, R1, R0 \n"
"    STR     R1, [R4, #4] \n"
"    BEQ     loc_FFDE6BC8 \n"
"    CMN     R0, #1 \n"
"    LDRNE   R0, =0x9200015 \n"
"    LDREQ   R0, =0x9200005 \n"
"    STR     R0, [R4, #0x10] \n"
"    B       loc_FFDE6B44 \n"

"loc_FFDE6BC8:\n"
"    SUB     R5, R5, R0 \n"
"    CMP     R5, R6 \n"
"    ADD     R7, R7, R0 \n"
"    LDRCS   R0, =0xFFDE67C4 \n"
"    LDRCS   R1, =0x2CA \n"
"    BLCS    _DebugAssert \n"
"    CMP     R5, #0 \n"
"    BNE     loc_FFDE6B68 \n"
"    LDR     R0, [R4] \n"
"    MOV     R1, R4 \n"
"    ADD     R0, R0, #1 \n"

"loc_FFDE6BF4:\n"
"    LDMFD   SP!, {R4-R10,LR} \n"
"    B       sub_FFDE6498 \n"
);
}

/*************************************************************/
//** sub_FFDE6558_my @ 0xFFDE6558 - 0xFFDE658C, length=14
void __attribute__((naked,noinline)) sub_FFDE6558_my() {
asm volatile (
"    STMFD   SP!, {R4-R6,LR} \n"
"    LDR     R5, =0x8428 \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R5] \n"
"    SUB     SP, SP, #0x38 \n"
"    CMN     R0, #1 \n"
"    BEQ     sub_FFDE65A0 \n"
"    LDR     R1, [R4, #8] \n"
"    LDR     R6, =0x9200003 \n"
"    TST     R1, #0x8000 \n"
"    BEQ     loc_FFDE658C \n"
//mod start
"    LDR R3, =current_write_ignored\n"
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_D\n" // jump over the next block
//mod end

"    BL      sub_FFC4E7A4 \n"
"    B       sub_FFDE6590 \n"

"loc_FFDE658C:\n"
"loc_D:\n"
"    BL      fwt_close \n"  // --> Patched. Old value = _Close.
"    LDR     PC, =0xFFDE6590 \n"  // Continue in firmware
);
}
