//-------------------------- BOOT.C ---------------------------------------------------------------

FILE boot.c

>>> file=../boot_hdr.c

FUNC start=0xFF81000C length=93 name=boot
ASM
FW $-1
>>>
/* Install task hooks via 0x193x is not possible with this new dryos version
   So the below code patches the CreateTask function in RAM to install our
   hook -- ERR99
*/
// Install CreateTask patch
"    LDR     R0, =patch_CreateTask\n"   // Patch data
"    LDM     R0, {R1,R2}\n"             // Get two patch instructions
"    LDR     R0, =hook_CreateTask\n"    // Address to patch
"    STM     R0, {R1,R2}\n"             // Store patch instructions

<<<
PATCHSUB ref=0
>>>

"patch_CreateTask:\n"
"    LDR     PC, [PC,#-0x4]\n"          // Do jump to absolute address CreateTask_my
"    .long   CreateTask_my\n"
<<<
ENDASM
ENDFUNC

FUNC sig=hook_CreateTask name=CreateTask_my
ASM
>>> file=../taskhook.S
FW 2
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// Power-on patch
//////////////////////////////////////////////////////////////
FUNC ref=0 length=27
>>>

    //Replacement of sub_FF865694 for correct power-on.
    //(short press = playback mode, long press = record mode)
    if ((*(int*) 0xC0220114) & 1)       // look at power-on switch sub_ff828ec8
        *(int*)(0x2AF4+0x4) = 0x200000; // Playmode
    else
        *(int*)(0x2AF4+0x4) = 0x100000; // Shootingmode

<<<
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 7
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      //
#endif

<<<
FW 30
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 9
PATCHSUB ref=0
//FW $-7
FW 15
PATCHSUB ref=1 name=task_Startup_my
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// Remove power-on mode handling
//////////////////////////////////////////////////////////////
FUNC ref=0 length=23
ASM
FW $-4
REM "Disable StartUpChecks"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// task_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 6
REM "load DISKBOOT.BIN"
FW 6
>>>
"    BL      CreateTask_spytask\n" // added
<<<
PATCHSUB ref=0 name=taskcreatePhySw_my
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreatePhySw_my
//////////////////////////////////////////////////////////////
FUNC ref=0 length=22
ASM
FW 7
PATCHSUB name=mykbd_task
PATCHVAL value=0x2000 comment="stack size for new task_PhySw so we don't have to do stack switch"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//////////////////////////////////////////////////////////////
FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 8
>>>
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// JogDial_task_my
//////////////////////////////////////////////////////////////
FUNC sig=task_RotaryEncoder name=JogDial_task_my
ASM
FW 8
>>> prelabel

// Save pointer for kbd.c routine
"    LDR     R2, =jog_position \n"
"    STR     R9, [R2] \n"

<<<
FW 40
>>>
//------------------  added code ---------------------
"labelA:\n"
"    LDR     R0, =jogdial_stopped\n"
"    LDR     R0, [R0]\n"
"    CMP     R0, #1\n"
"    BNE     labelB\n"
"    MOV     R0, #40\n"
"    BL      _SleepTask\n"
"    B       labelA\n"
"labelB:\n"
//------------------  original code ------------------
<<<
FW $
ENDASM
ENDFUNC

ENDFILE


//-------------------------- CAPT_SEQ.C -----------------------------------------------------------

FILE capt_seq.c

>>> file=../capt_seq_hdr.c

//////////////////////////////////////////////////////////////
// capt_seq_task
//////////////////////////////////////////////////////////////
FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 56
>>>
"    BL      shooting_expo_iso_override\n"      // added
<<<
FW 1
>>>
"    BL      shooting_expo_param_override\n"    // added
<<<
FW 1
>>>
"    MOV     R0, #0\n"                          // added
"    STR     R0, [R4,#0x28]\n"                  // added, fixes overrides behavior at short shutter press (from S95)
<<<
REM "above patch makes these three lines redundant"
REM
REM
FW 17
PATCHSUB ref=0
>>>
"    BL      capt_seq_hook_raw_here \n"         // added
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 31
>>>
"    BL      wait_until_remote_button_is_released\n" // added
"    BL      capt_seq_hook_set_nr\n"                 // added
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task
//////////////////////////////////////////////////////////////
FUNC sig=task_ExpDrv name=exp_drv_task
ASM
FW 263
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

FUNC ref=0
ASM
FW 48
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

FUNC ref=0
ASM
FW 16
PATCHSUB name=apex2us comment="_apex2us"
FW $
ENDASM
ENDFUNC

ENDFILE

//-------------------------- MOVIE_REC.C ----------------------------------------------------------

FILE movie_rec.c

>>> file=../movie_rec_hdr.c

//////////////////////////////////////////////////////////////
// movie_record_task
//////////////////////////////////////////////////////////////
FUNC sig=task_MovieRecord name=movie_record_task
ASM
FW 62
>>>
//begin patch
"    LDR     R0, =video_compression_rate \n" // added
"    BL      set_quality \n"                 // added
//end patch
<<<
FW $
ENDASM
ENDFUNC

ENDFILE

//-------------------------- FILEWRITE.C ----------------------------------------------------------
FILE filewrite.c

>>> file=../filewrite_hdr.c

//////////////////////////////////////////////////////////////
// filewritetask
//////////////////////////////////////////////////////////////
FUNC sig=task_FileWrite name=filewritetask
ASM
FW 45
PATCHSUB name=fwt_close
FW 17
>>>

//mod start
"    LDR R3, =ignore_current_write\n" // !!
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_A\n" // skip creating directory
//mod end
<<<
FW 3
PATCHSUB ref=0 comment="Open stage"
FW 5
PATCHSUB name=fwt_lseek
FW 17
>>>

//mod start
"    LDR R3, =ignore_current_write\n" // !!
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_B\n" // skip flushing the cache
//mod end

<<<
FW 2
>>>
"loc_B:\n"
<<<
FW 1
>>>
"loc_A:\n"
<<<
FW 8
PATCHSUB ref=1 comment="Write stage"
FW 1
PATCHSUB ref=2 comment="Close stage"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// open stage
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 2
>>>
//hook placed here to avoid conditional branch a few instructions below (watch out for registers!)
//"  MOV   R0, R4\n"      //data block start, commented out as R0 is already holding what we need
"    BL filewrite_main_hook\n"
"    MOV     R0, R4\n"      //restore register(s)
//hook end
<<<
FW 29
PATCHSUB name=fwt_open
FW 24
//PATCHSUB name=fwt_open
FW 1
FW 20
>>>

//mod start
"    LDR R3, =current_write_ignored\n"
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_C\n" // jump over the next block
//mod end

<<<
FW 10
>>>
"loc_C:\n"
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// write stage
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 32
PATCHSUB name=fwt_write
FW $
>>>
"    .ltorg\n" //+
<<<
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// close stage
//////////////////////////////////////////////////////////////
FUNC ref=2
ASM
FW 14
>>>
//mod start
"    LDR R3, =current_write_ignored\n"
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_D\n" // jump over the next block
//mod end

<<<
FW 2
>>>
"loc_D:\n"
<<<
PATCHSUB name=fwt_close
->FW
ENDASM
ENDFUNC

ENDFILE
