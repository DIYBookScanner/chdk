//-------------------------- BOOT.C ---------------------------------------------------------------
FILE boot.c

>>> file=../boot_hdr.c

//////////////////////////////////////////////////////////////
// boot
//////////////////////////////////////////////////////////////
FUNC start=0xFFC0000C length=86 name=boot
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0 length=27
>>>

    //http://chdk.setepontos.com/index.php/topic,4194.0.html
    *(int*)0x1934=(int)taskHook;
    *(int*)0x1938=(int)taskHook;

    // replacement of sub_FFC11B20 (sub_FFC307C4) for correct power-on.
    //(short press = playback mode, long press = record mode)
    *(int*)(0x222C+0x4)= (*(int*)0xC02200F8) &1 ? 0x200000 : 0x100000;

<<<
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 7
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      //
#endif

<<<
FW 12
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0 -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW $-1
PATCHSUB name=taskcreate_Startup_my ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreate_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 14
REM "Removed for correct power-on"
FW 8
PATCHSUB name=task_Startup_my ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// task_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 6
REM "start diskboot.bin"
FW 5
>>>
"    BL      CreateTask_spytask\n"  // added
<<<
PATCHSUB name=taskcreatePhySw_my ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreatePhySw_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 7
PATCHSUB name=mykbd_task
PATCHVAL value=0x2000 comment="stack size for new task_PhySw"
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//////////////////////////////////////////////////////////////
FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 7
PATCHSUB ref=0
>>>
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0 length=3
ASM
FW $-1
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0 length=22
ASM
FW $-1
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0 length=11
ASM
FW $-1
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0 -> ref0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 40
>>> file=../FAT32_detect.S
FW 7
REM "replaced below"
FW 12
REM "replaced below"
>>>
"    LDRB    R12, [LR,#0x1FE]\n"    // replace instructions above - First MBR signature byte (0x55), LR is original offset.
"    LDRB    LR, [LR,#0x1FF]\n"     // replace instructions above - Last MBR signature byte (0xAA), LR is original offset.
<<<
FW $
ENDASM
ENDFUNC

//-------------------------- MOVIE_REC.C ----------------------------------------------------------
FILE movie_rec.c

>>> file=../movie_rec_hdr.c

//////////////////////////////////////////////////////////////
// movie_record_task
//////////////////////////////////////////////////////////////
FUNC sig=task_MovieRecord name=movie_record_task
ASM
FW 38
>>>
"    BL      unlock_optical_zoom\n" // added
<<<
FW 2
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// movie_record_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 105
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// movie_record_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0 length=57
ASM
FW 13
REM
>>>
"    LDR     R7, =table\n"
<<<
FW 17
PATCHVAL value=0x1A
PATCHVAL value=0x19
FW 18
REM "Replaced by next instruction"
>>>
"    LDR     R2, =CompressionRateTable\n"
<<<
FW 2
>>>

"    LDR     R3, =video_mode\n"         // +
"    LDR     R3, [R3]\n"                // +
"    LDR     R3, [R3]\n"                // +
"    CMP     R3, #1\n"                  // +
"    LDREQ   R3, =video_quality\n"      // +
"    LDREQ   R3, [R3]\n"                // +
"    LDREQ   R2, [R3]\n"                // +

<<<
FW $
ENDASM
ENDFUNC

ENDFILE

//-------------------------- CAPT_SEQ.C -----------------------------------------------------------
FILE capt_seq.c

>>> file=../capt_seq_hdr.c

//////////////////////////////////////////////////////////////
// capt_seq_task
//////////////////////////////////////////////////////////////
FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 52
>>>
"    BL      shooting_expo_param_override\n"    // added
<<<
FW 36
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// capt_seq_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 36
PATCHSUB ref=0
//FW 1
>>>
"    BL      capt_seq_hook_raw_here\n"               // added
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// capt_seq_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 43
>>>
"    BL      wait_until_remote_button_is_released\n" // added
"    BL      capt_seq_hook_set_nr\n"                 // added
<<<
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task
//////////////////////////////////////////////////////////////
FUNC sig=task_ExpDrv name=exp_drv_task
ASM
FW 246
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 47
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 16
PATCHSUB name=apex2us
FW $
ENDASM
ENDFUNC
ENDFILE
