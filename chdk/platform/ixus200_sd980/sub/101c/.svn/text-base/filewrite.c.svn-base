/*
 * filewrite.c - auto-generated by CHDK code_gen.
 */
#include "lolevel.h"
#include "platform.h"

typedef struct {
    unsigned int address;
    unsigned int length;
} cam_ptp_data_chunk; //camera specific structure

#define MAX_CHUNKS_FOR_JPEG 4 //model specific
/*
 * fwt_data_struct: defined here as it's camera dependent
 * unneeded members are designated with unkn
 * file_offset, full_size, seek_flag only needs to be defined for DryOS>=r50 generation cameras
 * pdc is always required
 * name is not currently used
 */
typedef struct
{
    int unkn1[5];
    cam_ptp_data_chunk pdc[MAX_CHUNKS_FOR_JPEG];
    int unkn6;
    char name[32];
} fwt_data_struct;

#include "../../../generic/filewrite.c"

/*************************************************************/
//** filewritetask @ 0xFFA79A50 - 0xFFA79B34, length=58
void __attribute__((naked,noinline)) filewritetask() {
asm volatile (
"    STMFD   SP!, {R1-R5,LR} \n"
"    LDR     R4, =0x1C488 \n"

"loc_FFA79A58:\n"
"    LDR     R0, [R4, #0x10] \n"
"    MOV     R2, #0 \n"
"    ADD     R1, SP, #8 \n"
"    BL      sub_FF837F08 /*_ReceiveMessageQueue*/ \n"
"    CMP     R0, #0 \n"
"    BNE     loc_FFA79A88 \n"
"    LDR     R0, [SP, #8] \n"
"    LDR     R1, [R0] \n"
"    CMP     R1, #1 \n"
"    BNE     loc_FFA79A90 \n"
"    LDR     R0, [R4, #8] \n"
"    BL      _GiveSemaphore \n"

"loc_FFA79A88:\n"
"    BL      _ExitTask \n"
"    LDMFD   SP!, {R1-R5,PC} \n"

"loc_FFA79A90:\n"
"    SUB     R1, R1, #2 \n"
"    CMP     R1, #6 \n"
"    ADDLS   PC, PC, R1, LSL#2 \n"
"    B       loc_FFA79A58 \n"
"    B       loc_FFA79ABC \n"
"    B       loc_FFA79B20 \n"
"    B       loc_FFA79B28 \n"
"    B       loc_FFA79B28 \n"
"    B       loc_FFA79B28 \n"
"    B       loc_FFA79B28 \n"
"    B       loc_FFA79B30 \n"

"loc_FFA79ABC:\n"
"    MOV     R0, #0 \n"
"    STR     R0, [SP] \n"

"loc_FFA79AC4:\n"
"    LDR     R0, [R4, #0x10] \n"
"    MOV     R1, SP \n"
"    BL      sub_FF83814C /*_GetNumberOfPostedMessages*/ \n"
"    LDR     R0, [SP] \n"
"    CMP     R0, #0 \n"
"    BEQ     loc_FFA79AF0 \n"
"    LDR     R0, [R4, #0x10] \n"
"    MOV     R2, #0 \n"
"    ADD     R1, SP, #4 \n"
"    BL      sub_FF837F08 /*_ReceiveMessageQueue*/ \n"
"    B       loc_FFA79AC4 \n"

"loc_FFA79AF0:\n"
"    LDR     R0, [R4] \n"
"    CMN     R0, #1 \n"
"    BEQ     loc_FFA79B14 \n"
"    BL      fwt_close \n"  // --> Patched. Old value = _Close.
"    MVN     R0, #0 \n"
"    STR     R0, [R4] \n"
"    LDR     R0, =0xD9F5C \n"
"    BL      sub_FF86BCC4 \n"
"    BL      sub_FF86A0A8 \n"

"loc_FFA79B14:\n"
"    LDR     R0, [R4, #0xC] \n"
"    BL      _GiveSemaphore \n"
"    B       loc_FFA79A58 \n"

"loc_FFA79B20:\n"
"    BL      sub_FFA79D3C_my \n"  // --> Patched. Old value = 0xFFA79D3C. Open stage
"    B       loc_FFA79A58 \n"

"loc_FFA79B28:\n"
"    BL      sub_FFA79E70_my \n"  // --> Patched. Old value = 0xFFA79E70. Write stage
"    B       loc_FFA79A58 \n"

"loc_FFA79B30:\n"
"    BL      sub_FFA798E8_my \n"  // --> Patched. Old value = 0xFFA798E8. Close stage
"    B       loc_FFA79A58 \n"
);
}

/*************************************************************/
//** sub_FFA79D3C_my @ 0xFFA79D3C - 0xFFA79D7C, length=17
void __attribute__((naked,noinline)) sub_FFA79D3C_my() {
asm volatile (
"    STMFD   SP!, {R4-R8,LR} \n"
"    MOV     R4, R0 \n"
"    ADD     R0, R0, #0x38 \n"
"    SUB     SP, SP, #0x38 \n"
"    BL      sub_FF86BCC4 \n"
"    MOV     R1, #0 \n"
"    BL      sub_FF86A058 \n"
"    LDR     R0, [R4, #0xC] \n"
"    BL      sub_FF810338 \n"
"    LDR     R7, [R4, #8] \n"
"    LDR     R8, =0x1B6 \n"
"    ADD     R6, R4, #0x38 \n"
"    LDR     R5, [R4, #0xC] \n"
//hook start
"    MOV     R0, R4\n"
"    BL      filewrite_main_hook\n"
//hook end
"    MOV     R0, R6 \n"
"    MOV     R1, R7 \n"
"    MOV     R2, R8 \n"
"    BL      fwt_open \n"  // --> Patched. Old value = _Open.
"    LDR     PC, =0xFFA79D80 \n"  // Continue in firmware
);
}

/*************************************************************/
//** sub_FFA79E70_my @ 0xFFA79E70 - 0xFFA79F78, length=67
void __attribute__((naked,noinline)) sub_FFA79E70_my() {
asm volatile (
"    STMFD   SP!, {R4-R10,LR} \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R0] \n"
"    CMP     R0, #4 \n"
"    LDREQ   R6, [R4, #0x18] \n"
"    LDREQ   R7, [R4, #0x14] \n"
"    BEQ     loc_FFA79EBC \n"
"    CMP     R0, #5 \n"
"    LDREQ   R6, [R4, #0x20] \n"
"    LDREQ   R7, [R4, #0x1C] \n"
"    BEQ     loc_FFA79EBC \n"
"    CMP     R0, #6 \n"
"    LDREQ   R6, [R4, #0x28] \n"
"    LDREQ   R7, [R4, #0x24] \n"
"    BEQ     loc_FFA79EBC \n"
"    CMP     R0, #7 \n"
"    BNE     loc_FFA79ED0 \n"
"    LDR     R6, [R4, #0x30] \n"
"    LDR     R7, [R4, #0x2C] \n"

"loc_FFA79EBC:\n"
"    CMP     R6, #0 \n"
"    BNE     loc_FFA79EE0 \n"

"loc_FFA79EC4:\n"
"    MOV     R1, R4 \n"
"    MOV     R0, #8 \n"
"    B       loc_FFA79F74 \n"

"loc_FFA79ED0:\n"
"    LDR     R1, =0x297 \n"
"    LDR     R0, =0xFFA79B44 \n"
"    BL      _DebugAssert \n"
"    B       loc_FFA79EC4 \n"

"loc_FFA79EE0:\n"
"    LDR     R9, =0x1C488 \n"
"    MOV     R5, R6 \n"

"loc_FFA79EE8:\n"
"    LDR     R0, [R4, #4] \n"
"    CMP     R5, #0x1000000 \n"
"    MOVLS   R8, R5 \n"
"    MOVHI   R8, #0x1000000 \n"
"    BIC     R1, R0, #0xFF000000 \n"
"    CMP     R1, #0 \n"
"    BICNE   R0, R0, #0xFF000000 \n"
"    RSBNE   R0, R0, #0x1000000 \n"
"    CMPNE   R8, R0 \n"
"    MOVHI   R8, R0 \n"
"    LDR     R0, [R9] \n"
"    MOV     R2, R8 \n"
"    MOV     R1, R7 \n"
"    BL      fwt_write \n"  // --> Patched. Old value = _Write.
"    LDR     R1, [R4, #4] \n"
"    CMP     R8, R0 \n"
"    ADD     R1, R1, R0 \n"
"    STR     R1, [R4, #4] \n"
"    BEQ     loc_FFA79F48 \n"
"    CMN     R0, #1 \n"
"    LDRNE   R0, =0x9200015 \n"
"    LDREQ   R0, =0x9200005 \n"
"    STR     R0, [R4, #0x10] \n"
"    B       loc_FFA79EC4 \n"

"loc_FFA79F48:\n"
"    SUB     R5, R5, R0 \n"
"    CMP     R5, R6 \n"
"    ADD     R7, R7, R0 \n"
"    LDRCS   R0, =0xFFA79B44 \n"
"    LDRCS   R1, =0x2C2 \n"
"    BLCS    _DebugAssert \n"
"    CMP     R5, #0 \n"
"    BNE     loc_FFA79EE8 \n"
"    LDR     R0, [R4] \n"
"    MOV     R1, R4 \n"
"    ADD     R0, R0, #1 \n"

"loc_FFA79F74:\n"
"    LDMFD   SP!, {R4-R10,LR} \n"
"    B       sub_FFA79828 \n"
);
}

/*************************************************************/
//** sub_FFA798E8_my @ 0xFFA798E8 - 0xFFA7991C, length=14
void __attribute__((naked,noinline)) sub_FFA798E8_my() {
asm volatile (
"    STMFD   SP!, {R4-R6,LR} \n"
"    LDR     R5, =0x1C488 \n"
"    MOV     R4, R0 \n"
"    LDR     R0, [R5] \n"
"    SUB     SP, SP, #0x38 \n"
"    CMN     R0, #1 \n"
"    BEQ     sub_FFA79930 \n"
"    LDR     R1, [R4, #8] \n"
"    LDR     R6, =0x9200003 \n"
"    TST     R1, #0x8000 \n"
"    BEQ     loc_FFA7991C \n"
//mod start
"    LDR     R3, =current_write_ignored\n"
"    LDR     R3, [R3]\n"
"    CMP     R3, #0\n"
"    BNE     loc_D\n" // jump over the next block
//mod end

"    BL      sub_FF869108 \n"
"    B       sub_FFA79920 \n"

"loc_FFA7991C:\n"
"loc_D:\n"
"    BL      fwt_close \n"  // --> Patched. Old value = _Close.
"    LDR     PC, =0xFFA79920 \n"  // Continue in firmware
);
}
