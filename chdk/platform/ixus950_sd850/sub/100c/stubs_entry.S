// !!! THIS FILE IS GENERATED. DO NOT EDIT. !!!
#include "stubs_asm.h"

// Camera info:
//   Firmware Ver GM1.00C   // Found @ 0xff818028, "GM1.00C" @ 0xff818035
//   Firmware build timestamp: Mar 27 2007 13:40:57
//   Possible corrupt firmware dump - file size too small for start address 0xff810000
//     file size = 3.94MB, should be 7.94MB
//   Could not find Camera name - possible corrupt firmware dump

// Values for makefile.inc
//   MAXRAMADDR = 0x01ffffff
//   MEMISOSTART = 0x000ac070

// Stubs below should be checked. Stub not matched 100%, or difference found to current 'stubs_entry_2.S'
//    Name                                     Address      Rule  %  Comp to stubs_entry_2.S
//NHSTUB(EnterToCompensationEVF               ,0xffb095a8) //  3 88%    *** != 0x00000000
//NHSTUB(ExitFromCompensationEVF              ,0xffb0962c) //  3        *** != 0x00000000
NHSTUB(FreeUncacheableMemory                  ,0xff81e628) //  1 90%
NHSTUB(GetFocusLensSubjectDistance            ,0xffadc4e4) //  1 83%
NHSTUB(GetFocusLensSubjectDistanceFromLens    ,0xffadc9e8) //  2 92%
NHSTUB(GetParameterData                       ,0xffb490f0) //  1 76%
NHSTUB(GetPropertyCase                        ,0xff81bc98) //  2 89%
NHSTUB(GetSystemTime                          ,0xff8136ec) //  1 96%
NHSTUB(PutInNdFilter                          ,0xffa58704) //  1 92%
NHSTUB(PutOutNdFilter                         ,0xffa5874c) //  1 94%
NHSTUB(Restart                                ,0xff81b74c) //  1 96%
NHSTUB(SetParameterData                       ,0xffb490ec) //  2 66%
NHSTUB(UnsetZoomForMovie                      ,0xff83656c) //  1 89%
NHSTUB(WriteSDCard                            ,0xffab536c) //  3 74%
NHSTUB(add_ptp_handler                        ,0xff9ec59c) //  1 96%
NHSTUB(exmem_alloc                            ,0xff81e300) //  2 93%
// ERROR: free is not found.                               //--- ---    *** != 0xff92ba0c
NHSTUB(kbd_p2_f                               ,0xffa3754c) //  1 56%
//NHSTUB(kbd_pwr_off                          ,0xffa36434) //  1 83%    *** != 0xffa38c14
// ALT: NHSTUB(kbd_pwr_off, 0xffa36450) // 1 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xffa38c5c) // 1 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xffa38c78) // 1 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xffa38c5c) // 3 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xffa38c78) // 3 5/1
//NHSTUB(kbd_pwr_on                           ,0xffa2f5b4) //  1 55%    *** != 0xffa38bd4
// ALT: NHSTUB(kbd_pwr_on, 0xffa2f5e0) // 1 5/4
NHSTUB(malloc                                 ,0xff92ba00) //  1 53%
NHSTUB(mkdir                                  ,0xffaa3224) //  1 51%
// ALT: NHSTUB(mkdir, 0xffaa32f8) // 1 16/15
NHSTUB(taskIdListGet                          ,0xff935b48) //  1 82%
NHSTUB(utime                                  ,0xffb63770) //  1 57%
NHSTUB(localtime                              ,0xff924818) //  1 93%
NHSTUB(Mount_FileSystem                       ,0xffaa22e4) //  3 93%
NHSTUB(MakeAFScan                             ,0xffb0ecb0) //  2 79%

// Check of modemap from 'platform/CAMERA/shooting.c':
// Firmware modemap table found @ffb4b564 -> ffb4b564
// No problems found with modemap table.

// Values below can be overridden in 'stubs_min.S':
//DEF(levent_table                            ,0xffb3e214) // Found @0xffb3e214,          stubs_min = 0xffb3e214 (0xFFB3E214)
//DEF(FlashParamsTable                        ,0xffb4dcb8) // Found @0xffb4dcb8,          stubs_min = 0xffb4dcb8 (0xFFB4DCB8)

// Values below go in 'lib.c':
//int get_flash_params_count(void) { return 0x6f; }                          // Found @0xffb4915c

// Misc stuff
// LED table init @ 0xffa36e50
// LED #1: 0xc02200cc, offset 0x4
// LED #2: 0xc02200c8, offset 0x44
// LED #3: 0xc02200d0, offset 0x84
// LED #4: 0xc02200d4, offset 0xc4
// LED #5: 0xc02200c4, offset 0x204
// LED #6: 0xc02200c0, offset 0x244

// canon_data_src: 0xffb99360, canon_data_len: 0xe9e0

// Stubs below matched 100%.
//    Name                                     Address                Comp to stubs_entry_2.S
NHSTUB(AllocateUncacheableMemory              ,0xff81e5f4) //  1
NHSTUB(Close                                  ,0xffaa2fbc) //120
NHSTUB(CreateTask                             ,0xffb235ac) //120
NHSTUB(DebugAssert                            ,0xffb2f4f0) //1100
NHSTUB(DeleteFile_Fut                         ,0xffa9e578) //  1
NHSTUB(DoAELock                               ,0xffb09734) //120
NHSTUB(DoAFLock                               ,0xffb09200) //120
NHSTUB(ExecuteEventProcedure                  ,0xff814a58) //  1
NHSTUB(ExitTask                               ,0xffb2396c) //120
NHSTUB(Fclose_Fut                             ,0xffa9e6ec) //120
NHSTUB(Feof_Fut                               ,0xffa9e8e8) //  3
NHSTUB(Fflush_Fut                             ,0xffa9e924) //  3
NHSTUB(Fgets_Fut                              ,0xffa9e850) //  3
NHSTUB(Fopen_Fut                              ,0xffa9e6ac) //120
NHSTUB(Fread_Fut                              ,0xffa9e7a8) //120
NHSTUB(Fseek_Fut                              ,0xffa9e89c) //120
NHSTUB(Fwrite_Fut                             ,0xffa9e7fc) //120
NHSTUB(GetBatteryTemperature                  ,0xffa3d408) //102
NHSTUB(GetCCDTemperature                      ,0xffa3d3f4) //102
NHSTUB(GetCurrentAvValue                      ,0xffa58520) //120
//NHSTUB(GetDrive_ClusterSize                 ,0xffaa27ac) //119            == 0xffaa27ac
//NHSTUB(GetDrive_FreeClusters                ,0xffaa2820) //1103            == 0xffaa2820
//NHSTUB(GetDrive_TotalClusters               ,0xffaa27e8) //119            == 0xffaa27e8
NHSTUB(GetOpticalTemperature                  ,0xffa3d3e0) //120
NHSTUB(GetZoomLensCurrentPoint                ,0xffaee5c0) //120
NHSTUB(GetZoomLensCurrentPosition             ,0xffaee5d4) //102
NHSTUB(GiveSemaphore                          ,0xffb23178) //120
NHSTUB(IsStrobeChargeCompleted                ,0xff9b0cb8) //  2
NHSTUB(LEDDrive                               ,0xffa36a64) //120
NHSTUB(LocalTime                              ,0xffb2fdbc) //115
NHSTUB(LockMainPower                          ,0xffb45ff4) //120
NHSTUB(MakeDirectory_Fut                      ,0xffa9e62c) //  3
NHSTUB(MoveFocusLensToDistance                ,0xffa5ab40) //102
NHSTUB(MoveIrisWithAv                         ,0xffae30e0) //120
NHSTUB(MoveZoomLensWithPoint                  ,0xffaee498) //120
NHSTUB(Open                                   ,0xffaa2f94) //120
NHSTUB(PT_MoveDigitalZoomToWide               ,0xffb1a5e0) //120
NHSTUB(PT_MoveOpticalZoomAt                   ,0xffb1a5a4) //120
NHSTUB(PT_PlaySound                           ,0xffb1a0a4) //  3
NHSTUB(PostLogicalEventForNotPowerType        ,0xffb41780) //120
NHSTUB(PostLogicalEventToUI                   ,0xffb417fc) //120
NHSTUB(Read                                   ,0xffaa3050) //120
NHSTUB(RefreshPhysicalScreen                  ,0xff917458) //120
NHSTUB(RenameFile_Fut                         ,0xffa9e4d0) //  3
NHSTUB(SetAE_ShutterSpeed                     ,0xffa5dc40) //102
NHSTUB(SetAutoShutdownTime                    ,0xffb45ef8) //120
NHSTUB(SetCurrentCaptureModeType              ,0xff82ab20) //120
NHSTUB(SetFileAttributes                      ,0xffaa31a4) //  3
NHSTUB(SetLogicalEventActive                  ,0xffb4399c) //1104
NHSTUB(SetPropertyCase                        ,0xff81bb60) //  3
//NHSTUB(SetScriptMode                        ,0xffb43a00) //120            == 0xffb43a00
NHSTUB(SleepTask                              ,0xffb234c0) //120
//NHSTUB(TakeSemaphore                        ,0xffb22f70) //1101            == 0xffb22f70
NHSTUB(TurnOffBackLight                       ,0xff84af38) //  2
NHSTUB(TurnOnBackLight                        ,0xff84af08) //  2
NHSTUB(TurnOnDisplay                          ,0xffa2c354) //120
NHSTUB(TurnOffDisplay                         ,0xffa2c364) //120
NHSTUB(UnlockAE                               ,0xffb09784) //120
NHSTUB(UnlockAF                               ,0xffb09280) //120
NHSTUB(UnlockMainPower                        ,0xffb4608c) //120
NHSTUB(UpdateMBROnFlash                       ,0xffaa24e0) //  1
NHSTUB(VbattGet                               ,0xffa34c08) //120
NHSTUB(Write                                  ,0xffaa305c) //120
NHSTUB(_log                                   ,0xff91e5f4) //121
NHSTUB(_log10                                 ,0xff91b39c) //121
NHSTUB(_pow                                   ,0xff91b51c) //121
NHSTUB(_sqrt                                  ,0xff91d3dc) //  1
NHSTUB(apex2us                                ,0xff93ce88) //  1
NHSTUB(close                                  ,0xff9289c0) //109
NHSTUB(exmem_free                             ,0xff81e550) //102
NHSTUB(kbd_p1_f                               ,0xffa3711c) //  1
NHSTUB(kbd_p1_f_cont                          ,0xffa37128) //109
NHSTUB(kbd_read_keys_r2                       ,0xffa386c8) //  3
NHSTUB(lseek                                  ,0xff928b04) //  1
NHSTUB(memcmp                                 ,0xff923bf8) //120
NHSTUB(memcpy                                 ,0xff923c34) //120
NHSTUB(memset                                 ,0xff923cac) //120
NHSTUB(open                                   ,0xff929004) //109
NHSTUB(closedir                               ,0xffb63614) //  1
NHSTUB(qsort                                  ,0xff923458) //  1
NHSTUB(rand                                   ,0xff92347c) //  1
NHSTUB(realloc                                ,0xffb2f0fc) //115
NHSTUB(srand                                  ,0xff9234a0) //  1
NHSTUB(stat                                   ,0xffb636dc) //  1
NHSTUB(strcat                                 ,0xff923ccc) //  1
NHSTUB(strchr                                 ,0xff923cf8) //  1
NHSTUB(strcmp                                 ,0xff923d1c) //120
NHSTUB(strcpy                                 ,0xff923eb0) //120
NHSTUB(strftime                               ,0xff925538) //  1
NHSTUB(strlen                                 ,0xff924014) //120
NHSTUB(strncmp                                ,0xff924078) //  1
NHSTUB(strncpy                                ,0xff9240bc) //  1
NHSTUB(strrchr                                ,0xff924140) //  1
NHSTUB(strtol                                 ,0xff923894) //  1
NHSTUB(isdigit                                ,0xff91ffc8) //  1
NHSTUB(isspace                                ,0xff920040) //  1
NHSTUB(isalpha                                ,0xff91ff98) //  1
NHSTUB(isupper                                ,0xff920058) //  1
NHSTUB(islower                                ,0xff91fff8) //  1
NHSTUB(ispunct                                ,0xff920028) //  1
NHSTUB(isxdigit                               ,0xff920070) //  1
NHSTUB(toupper                                ,0xff920098) //  1
NHSTUB(tolower                                ,0xff920088) //  1
NHSTUB(taskLock                               ,0xff936204) //  1
NHSTUB(taskUnlock                             ,0xff9362ac) //  1
NHSTUB(taskName                               ,0xff935a40) //  1
NHSTUB(errnoOfTaskGet                         ,0xff926614) //  1
NHSTUB(readdir                                ,0xffb635e0) //  1
NHSTUB(strtoul                                ,0xff923a3c) //  1
NHSTUB(strpbrk                                ,0xff924104) //  1
NHSTUB(mktime                                 ,0xff9249e0) //  1
NHSTUB(opendir                                ,0xffb63648) //  1
NHSTUB(memchr                                 ,0xff923bc4) //  1
NHSTUB(memPartInfoGet                         ,0xff92be20) //  1
NHSTUB(iosDrvInstall                          ,0xff929ea4) //  1
NHSTUB(iosDevAdd                              ,0xff929be0) //  1
NHSTUB(iosDevDelete                           ,0xff929bb8) //  1
NHSTUB(GetCurrentTargetDistance               ,0xffa5a8a8) //  1
NHSTUB(taskCreateHookAdd                      ,0xff92e660) //  1
NHSTUB(taskDeleteHookAdd                      ,0xff92e59c) //  1
NHSTUB(Unmount_FileSystem                     ,0xffaa238c) //  1
NHSTUB(taskSuspend                            ,0xff935c50) //  1
NHSTUB(taskResume                             ,0xff935e24) //  1
NHSTUB(time                                   ,0xff925564) //  1
NHSTUB(vsprintf                               ,0xff927768) //115
NHSTUB(EngDrvRead                             ,0xffa45c6c) //102
