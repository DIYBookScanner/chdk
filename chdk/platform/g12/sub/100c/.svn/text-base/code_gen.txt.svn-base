//-------------------------- BOOT.C ---------------------------------------------------------------

FILE boot.c

>>> file=../boot_hdr.c

FUNC start=0xFF81000C length=86 name=boot
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

FUNC ref=0 length=27
>>>

	//http://chdk.setepontos.com/index.php/topic,4194.0.html
	*(int*)0x1938=(int)taskHook;
	*(int*)0x193C=(int)taskHook;
    
	// replacement of sub_FF864BE0 for correct power-on.
	*(int*)(0x25E0) = (*(int*)0xC0220108)&1 ? 0x100000 : 0x200000; 

<<<
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

FUNC ref=0 length=22
ASM
FW 7
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      // 
#endif

<<<
FW $-1
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

FUNC ref=0
ASM
FW $-1
PATCHSUB name=taskcreate_Startup_my ref=0
ENDASM
ENDFUNC

FUNC ref=0 length=29
ASM
FW 17
REM "See begin of sub_FF810354_my()"
FW $-1
PATCHSUB name=task_Startup_my ref=0
->FW
ENDASM
ENDFUNC

FUNC ref=0
ASM
FW 6
REM "start diskboot.bin"
FW 5
>>>

"    BL      CreateTask_spytask\n"  // added

<<<
PATCHSUB name=taskcreatePhySw_my ref=0
->FW
ENDASM
ENDFUNC

FUNC ref=0
ASM
FW 7
PATCHSUB name=mykbd_task
PATCHVAL value=0x2000 comment="stack size for new task_PhySw"
->FW
ENDASM
ENDFUNC

FUNC sig=task_InitFileModules length=8 name=init_file_modules_task
ASM
FW $-1
PATCHSUB ref=0
>>>
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
->FW
ENDASM
ENDFUNC

FUNC ref=0 length=3
ASM
FW $-1
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

FUNC ref=0 length=22
ASM
FW $-1
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

FUNC ref=0 length=11
ASM
FW $-1
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

FUNC ref=0
ASM
FW 41
>>> file=../FAT32_detect.S
FW 7
REM "replaced below"
FW 12
REM "replaced below"
>>>
"    LDRB    R12, [LR,#0x1FE]\n"    // replace instructions above
"    LDRB    LR, [LR,#0x1FF]\n"     // replace instructions above
<<<
FW $
ENDASM
ENDFUNC

FUNC sig=task_RotaryEncoder name=JogDial_task_my
ASM
FW 7
>>>

// Save pointer for kbd.c routine
"    LDR     R12, =jog_position \n"
"    STR     R3, [R12] \n"

<<<
FW 44
>>>
//------------------  added code ---------------------
"labelA:\n"
"    LDR     R0, =jogdial_stopped\n"
"    LDR     R0, [R0]\n"
"    CMP     R0, #1\n"
"    BNE     labelB\n"
"    MOV     R0, #40\n"
"    BL      _SleepTask\n"
"    B       labelA\n"
"labelB:\n"
//------------------  original code ------------------
<<<
FW $
ENDASM
ENDFUNC

ENDFILE

//-------------------------- MOVIE_REC.C ----------------------------------------------------------

FILE movie_rec.c

>>> file=../movie_rec_hdr.c

FUNC sig=task_MovieRecord name=movie_record_task
ASM
FW 58
>>>

"    BL      unlock_optical_zoom\n"     // added to unlock the zoom

<<<
FW 3
>>>

"    LDR     R0, =video_compression_rate\n" //added
"    BL      set_quality\n"                 //added

<<<
FW $
ENDASM
ENDFUNC

ENDFILE

//-------------------------- CAPT_SEQ.C -----------------------------------------------------------

FILE capt_seq.c

>>> file=../capt_seq_hdr.c

FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 57
>>>
"    BL      shooting_expo_iso_override\n"      // added
<<<
FW
>>>
"    BL      shooting_expo_param_override\n"    // added
<<<
FW
>>>
"    MOV     R0, #0\n"                          // added
"    STR     R0, [R4,#0x24]\n"                  // added, fixes overrides behavior at short shutter press (from S95)
<<<
REM "above patch makes these three lines redundant"
REM
REM
FW 8
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

FUNC ref=0
ASM
FW 84
>>>
"    BL      wait_until_remote_button_is_released\n"    // added
"    BL      capt_seq_hook_set_nr\n"                    // added
<<<
FW 20
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

FUNC ref=0 length=60
ASM
FW 51
>>>
"    BL      capt_seq_hook_raw_here\n"      // added (16/2/2011, moved here so that long exposures work)
<<<
FW $
ENDASM
ENDFUNC

FUNC sig=task_ExpDrv name=exp_drv_task
ASM
FW 207
SKIP 24
FW 56
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

FUNC ref=0 length=51
ASM
FW $-1
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

FUNC ref=0 length=17
ASM
FW $-1
PATCHSUB name=apex2us
->FW
ENDASM
ENDFUNC

ENDFILE

//-------------------------- FILEWRITE.C ----------------------------------------------------------

FILE filewrite.c

>>> file=../filewrite_hdr.c

FUNC sig=task_FileWrite name=filewritetask
ASM
FW 41
PATCHSUB name=fwt_close
FW 8
PATCHSUB ref=0
FW
PATCHSUB ref=1
FW
PATCHSUB ref=2
FW $
ENDASM
ENDFUNC

FUNC ref=0
ASM
FW 18
>>>
//hook start
"    STMFD   SP!, {R4-R12,LR} \n"
"    MOV     R0, R4 \n"
"    BL      filewrite_main_hook \n"
"    LDMFD   SP!, {R4-R12,LR} \n"
//hook end
<<<
FW 3
PATCHSUB name=fwt_open
->FW
ENDASM
ENDFUNC

FUNC ref=1
ASM
FW 32
PATCHSUB name=fwt_write
->FW
ENDASM
ENDFUNC

FUNC ref=2
ASM
FW 13
PATCHSUB name=fwt_close
->FW
ENDASM
ENDFUNC

ENDFILE
