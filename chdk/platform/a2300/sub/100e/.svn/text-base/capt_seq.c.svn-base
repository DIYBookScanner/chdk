#include "lolevel.h"
#include "platform.h"
#include "core.h"
#include "conf.h"
#include "stdlib.h"

static long *nrflag = (long*)(0x8748+0x00);  // Found @ ff9df408 & ff9df468
#define NR_AUTO (0)                          // have to explictly reset value back to 0 to enable auto

#define PAUSE_FOR_FILE_COUNTER 150           // Enable delay in capt_seq_hook_raw_here to ensure file counter is updated
#include "../../../generic/capt_seq.c"

//** capt_seq_task  @ 0xFF86F0F0 

void __attribute__((naked,noinline)) capt_seq_task(  ) { 
asm volatile (
      "STMFD   SP!, {R3-R9,LR} \n"
      "LDR     R4, =0x36C2C \n"
      "LDR     R7, =0x2AEC \n"
      "MOV     R6, #0 \n"
"loc_FF86F100:\n"
      "LDR     R0, [R7, #4] \n"
      "MOV     R2, #0 \n"
      "MOV     R1, SP \n"
      "BL      sub_003F7218 \n" // RAM
      "TST     R0, #1 \n"
      "BEQ     loc_FF86F12C \n"
      "LDR     R1, =0x493 \n"
      "LDR     R0, =0xFF86EC5C \n" // "SsShootTask.c"
      "BL      _DebugAssert \n"
      "BL      _ExitTask \n"
      "LDMFD   SP!, {R3-R9,PC} \n"
"loc_FF86F12C:\n"
      "LDR     R0, [SP] \n"
      "LDR     R1, [R0] \n"
      "CMP     R1, #0x20 \n"
      "ADDCC   PC, PC, R1, LSL #2 \n"
      "B       loc_FF86F394 \n"
      "B       loc_FF86F1C0 \n"
      "B       loc_FF86F1D8 \n"
      "B       loc_FF86F248 \n"
      "B       loc_FF86F25C \n"
      "B       loc_FF86F254 \n"
      "B       loc_FF86F268 \n"
      "B       loc_FF86F270 \n"
      "B       loc_FF86F278 \n"
      "B       loc_FF86F294 \n"
      "B       loc_FF86F2C0 \n"
      "B       loc_FF86F2A0 \n"
      "B       loc_FF86F2AC \n"
      "B       loc_FF86F2B4 \n"
      "B       loc_FF86F2C8 \n"
      "B       loc_FF86F2D0 \n"
      "B       loc_FF86F2D8 \n"
      "B       loc_FF86F2E0 \n"
      "B       loc_FF86F2E8 \n"
      "B       loc_FF86F2F4 \n"
      "B       loc_FF86F2FC \n"
      "B       loc_FF86F304 \n"
      "B       loc_FF86F30C \n"
      "B       loc_FF86F314 \n"
      "B       loc_FF86F320 \n"
      "B       loc_FF86F328 \n"
      "B       loc_FF86F330 \n"
      "B       loc_FF86F338 \n"
      "B       loc_FF86F340 \n"
      "B       loc_FF86F34C \n"
      "B       loc_FF86F354 \n"
      "B       loc_FF86F360 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F1C0:\n"
      "BL      shooting_expo_iso_override \n" // added
      "BL      sub_FF86F900 \n"
      "BL      shooting_expo_param_override \n" // added
      "BL      sub_FF86CF58 \n"
//      "LDR     R0, [R4, #0x28] \n"
//      "CMP     R0, #0 \n"
//      "BLNE    sub_FF961044 \n" // above 3 lines removed - redundant with added lines below
      "MOV     R0, #0 \n" // patch added
      "STR     R0, [R4,#0x28] \n" //fixes overrides behavior at short shutter press
      "B       loc_FF86F3A0 \n"
"loc_FF86F1D8:\n"
      "LDR     R5, [R0, #0x10] \n"
      "LDR     R0, [R4, #0x28] \n"
      "CMP     R0, #0 \n"
      "BNE     loc_FF86F220 \n"
      "LDR     R0, [R4, #0x8C] \n"
      "TST     R0, #0x30 \n"
      "BLNE    sub_FF870AA4 \n"
      "BL      sub_FF870784 \n"
      "MOV     R1, R5 \n"
      "BL      sub_FF8707DC \n"
      "LDR     R0, =0x10F \n"
      "MOV     R2, #4 \n"
      "ADD     R1, R5, #0x24 \n"
      "BL      _SetPropertyCase \n"
      "MOV     R2, #4 \n"
      "ADD     R1, R5, #0x28 \n"
      "MOV     R0, #0x2C \n"
      "BL      _SetPropertyCase \n"
"loc_FF86F220:\n"
      "MOV     R0, R5 \n"
//      "BL      sub_FF960F08 \n"  //original
      "BL      sub_FF960F08_my \n" //patched
      "BL      capt_seq_hook_raw_here \n" // patch
      "MOV     R8, R0 \n"
      "MOV     R2, R5 \n"
      "MOV     R1, #1 \n"
      "BL      sub_FF86D408 \n"
      "TST     R8, #1 \n"
      "MOVEQ   R0, R5 \n"
      "BLEQ    sub_FF9608FC \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F248:\n"
      "MOV     R0, #1 \n"
      "BL      sub_FF86FBD0 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F254:\n"
      "BL      sub_FF86F568 \n"
      "B       loc_FF86F260 \n"
"loc_FF86F25C:\n"
      "BL      sub_FF86F8E0 \n"
"loc_FF86F260:\n"
      "STR     R6, [R4, #0x28] \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F268:\n"
      "BL      sub_FF86F8E8 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F270:\n"
      "BL      sub_FF86FAB8 \n"
      "B       loc_FF86F298 \n"
"loc_FF86F278:\n"
      "LDR     R5, [R0, #0x10] \n"
      "MOV     R0, R5 \n"
      "BL      sub_FF9610DC \n"
      "MOV     R2, R5 \n"
      "MOV     R1, #9 \n"
      "BL      sub_FF86D408 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F294:\n"
      "BL      sub_FF86FB38 \n"
"loc_FF86F298:\n"
      "BL      sub_FF86CF58 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2A0:\n"
      "LDR     R0, [R4, #0x58] \n"
      "BL      sub_FF86FFA8 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2AC:\n"
      "BL      sub_FF870340 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2B4:\n"
      "MOV     R0, #0 \n"
      "BL      sub_FF8703A4 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2C0:\n"
      "BL      sub_FF86F8E0 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2C8:\n"
      "BL      sub_FF95FCA8 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2D0:\n"
      "BL      sub_FF95FF08 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2D8:\n"
      "BL      sub_FF95FFC0 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2E0:\n"
      "BL      sub_FF960094 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2E8:\n"
      "MOV     R0, #0 \n"
      "BL      sub_FF9602F4 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2F4:\n"
      "BL      sub_FF960464 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F2FC:\n"
      "BL      sub_FF9604F8 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F304:\n"
      "BL      sub_FF9605B4 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F30C:\n"
      "BL      sub_FF86FD44 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F314:\n"
      "BL      sub_FF86FDB0 \n"
      "BL      sub_FF832410 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F320:\n"
      "BL      sub_FF960164 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F328:\n"
      "BL      sub_FF9601A4 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F330:\n"
      "BL      sub_FF871C80 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F338:\n"
      "BL      sub_FF871CF4 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F340:\n"
      "LDR     R0, [R0, #0xC] \n"
      "BL      sub_FF9606DC \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F34C:\n"
      "BL      sub_FF96074C \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F354:\n"
      "BL      sub_FF871D5C \n"
      "BL      sub_FF871D14 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F360:\n"
      "MOV     R0, #1 \n"
      "BL      sub_FF9617F8 \n"
      "MOV     R0, #1 \n"
      "BL      sub_FF961920 \n"
      "LDRH    R0, [R4, #0x9C] \n"
      "CMP     R0, #4 \n"
      "LDRNEH  R0, [R4] \n"
      "SUBNE   R1, R0, #0x8200 \n"
      "SUBNES  R1, R1, #0x2E \n"
      "BNE     loc_FF86F3A0 \n"
      "BL      sub_FF871CF4 \n"
      "BL      sub_FF8721B8 \n"
      "B       loc_FF86F3A0 \n"
"loc_FF86F394:\n"
      "LDR     R1, =0x5F4 \n"
      "LDR     R0, =0xFF86EC5C \n" // "SsShootTask.c"
      "BL      _DebugAssert \n"
"loc_FF86F3A0:\n"
      "LDR     R0, [SP] \n"
      "LDR     R1, [R0, #4] \n"
      "LDR     R0, [R7] \n"
      "BL      sub_003FAC6C \n" // RAM
      "LDR     R5, [SP] \n"
      "LDR     R0, [R5, #8] \n"
      "CMP     R0, #0 \n"
      "LDREQ   R1, =0x117 \n"
      "LDREQ   R0, =0xFF86EC5C \n" // "SsShootTask.c"
      "BLEQ    _DebugAssert \n"
      "STR     R6, [R5, #8] \n"
      "B       loc_FF86F100 \n"
	);
}

//**  sub_FF960F08_my  @ 0xFF960F08

void __attribute__((naked,noinline)) sub_FF960F08_my() {
asm volatile (
      "STMFD   SP!, {R3-R7,LR} \n"
      "LDR     R4, =0x36C2C \n"
      "MOV     R6, R0 \n"
      "LDR     R0, [R4, #0x28] \n"
      "MOV     R5, #0 \n"
      "CMP     R0, #0 \n"
      "BNE     loc_FF960F38 \n"
      "MOV     R0, #0xC \n"
      "BL      sub_FF87373C \n"
      "TST     R0, #1 \n"
      "MOVNE   R0, #1 \n"
      "BNE     loc_FF961040 \n"
"loc_FF960F38:\n"
      "BL      sub_FF86F8F0 \n"
      "LDR     R0, [R4, #0x28] \n"
      "CMP     R0, #0 \n"
      "BNE     loc_FF96102C \n"
      "MOV     R0, R6 \n"
      "BL      sub_FF96083C \n"
      "TST     R0, #1 \n"
      "BNE     loc_FF961040 \n"
      "LDR     R0, [R4, #0x8C] \n"
      "AND     R0, R0, #0x40 \n"
      "CMP     R0, #0 \n"
      "LDRNEH  R0, [R4, #0x9A] \n"
      "CMPNE   R0, #3 \n"
      "LDRNE   R0, [R6, #8] \n"
      "CMPNE   R0, #1 \n"
      "BLS     loc_FF960F94 \n"
      "BL      sub_FF961AE0 \n"
      "MOV     R3, #0xC0 \n"
      "STR     R3, [SP] \n"
      "LDR     R2, =0x3A98 \n"
      "LDR     R3, =0xFF961164 \n" //SsCaptureSeq.c
      "MOV     R1, #0x8000 \n"
      "BL      sub_FF8739A4 \n"
"loc_FF960F94:\n"
      "MOV     R0, R6 \n"
      "BL      sub_FF960B48 \n"
      "BL      sub_FF9615D8 \n"

      "BL      wait_until_remote_button_is_released\n"  //before shoot XXX
      "BL      capt_seq_hook_set_nr\n"

      "LDR     R0, [R4, #0x8C] \n"
      "TST     R0, #0x40 \n"
      "BEQ     loc_FF961008 \n"
      "LDR     R0, =0x181 \n"
      "MOV     R2, #4 \n"
      "MOV     R1, SP \n"
      "BL      _GetPropertyCase \n"
      "TST     R0, #1 \n"
      "MOVNE   R1, #0xD4 \n"
      "LDRNE   R0, =0xFF961164 \n"  // SsCaptureSeq.c
      "BLNE    _DebugAssert \n"
      "LDR     R0, [SP] \n"
      "CMP     R0, #0 \n"
      "BNE     loc_FF960FE8 \n"
      "BL      sub_FF961AE0 \n"
      "MOV     R1, #0x8000 \n"
      "BL      sub_003FAC6C \n" //RAM
      "B       loc_FF961008 \n"
"loc_FF960FE8:\n"
      "BL      sub_FF961AE0 \n"
      "MOV     R1, #0x8000 \n"
      "BL      sub_003FACA0 \n" //RAM
      "LDR     R2, =0xFF960EF4 \n"
      "LDR     R0, [SP] \n"
      "MOV     R3, #0x8000 \n"
      "ADD     R1, R2, #0 \n"
      "BL      sub_FF8346B0 \n"
"loc_FF961008:\n"
      "LDR     R0, [R4, #0x8C] \n"
      "TST     R0, #0x10 \n"
      "MOV     R0, R6 \n"
      "BEQ     loc_FF961020 \n"
      "BL      sub_FFA6EF04 \n"
      "B       loc_FF961024 \n"
"loc_FF961020:\n"
      "BL      sub_FFA6EB60 \n"
"loc_FF961024:\n"
      "MOV     R5, R0 \n"
      "B       loc_FF96103C \n"
"loc_FF96102C:\n"
      "LDR     R0, =0x6784 \n"
      "LDR     R0, [R0] \n"
      "CMP     R0, #0 \n"
      "MOVNE   R5, #0x1D \n"
"loc_FF96103C:\n"
      "MOV     R0, R5 \n"
"loc_FF961040:\n"
      "LDMFD   SP!, {R3-R7,PC} \n"
	);
}

//** exp_drv_task  @ 0xFF8AEDF4 

void __attribute__((naked,noinline)) exp_drv_task(  ) { 
asm volatile (
      "STMFD   SP!, {R4-R9,LR} \n"
      "SUB     SP, SP, #0x2C \n"
      "LDR     R6, =0x3DA0 \n"
      "LDR     R7, =0xBB8 \n"
      "LDR     R4, =0x55E1C \n"
      "MOV     R0, #0 \n"
      "ADD     R5, SP, #0x1C \n"
      "STR     R0, [SP, #0xC] \n"
"loc_FF8AEE14:\n"
      "LDR     R0, [R6, #0x20] \n"
      "MOV     R2, #0 \n"
      "ADD     R1, SP, #0x28 \n"
      "BL      sub_003F7218 \n" //RAM
      "LDR     R0, [SP, #0xC] \n"
      "CMP     R0, #1 \n"
      "BNE     loc_FF8AEE60 \n"
      "LDR     R0, [SP, #0x28] \n"
      "LDR     R0, [R0] \n"
      "CMP     R0, #0x14 \n"
      "CMPNE   R0, #0x15 \n"
      "CMPNE   R0, #0x16 \n"
      "CMPNE   R0, #0x17 \n"
      "BEQ     loc_FF8AEFC0 \n"
      "CMP     R0, #0x2A \n"
      "BEQ     loc_FF8AEF48 \n"
      "ADD     R1, SP, #0xC \n"
      "MOV     R0, #0 \n"
      "BL      sub_FF8AEDA4 \n"
"loc_FF8AEE60:\n"
      "LDR     R0, [SP, #0x28] \n"
      "LDR     R1, [R0] \n"
      "CMP     R1, #0x30 \n"
      "BNE     loc_FF8AEE8C \n"
      "BL      sub_FF8B01D0 \n"
      "LDR     R0, [R6, #0x1C] \n"
      "MOV     R1, #1 \n"
      "BL      sub_003FAC6C \n" //RAM
      "BL      _ExitTask \n"
      "ADD     SP, SP, #0x2C \n"
      "LDMFD   SP!, {R4-R9,PC} \n"
"loc_FF8AEE8C:\n"
      "CMP     R1, #0x2F \n"
      "BNE     loc_FF8AEEA8 \n"
      "LDR     R2, [R0, #0x8C]! \n"
      "LDR     R1, [R0, #4] \n"
      "MOV     R0, R1 \n"
      "BLX     R2 \n"
      "B       loc_FF8AF47C \n"
"loc_FF8AEEA8:\n"
      "CMP     R1, #0x28 \n"
      "BNE     loc_FF8AEEF8 \n"
      "LDR     R0, [R6, #0x1C] \n"
      "MOV     R1, #0x80 \n"
      "BL      sub_003FACA0 \n" //RAM
      "LDR     R0, =0xFF8AA710 \n"
      "MOV     R1, #0x80 \n"
      "BL      sub_FF954ED0 \n"
      "LDR     R0, [R6, #0x1C] \n"
      "MOV     R2, R7 \n"
      "MOV     R1, #0x80 \n"
      "BL      sub_003FABAC \n" //RAM
      "TST     R0, #1 \n"
      "LDRNE   R1, =0x1599 \n"
      "BNE     loc_FF8AEFB4 \n"
"loc_FF8AEEE4:\n"
      "LDR     R1, [SP, #0x28] \n"
      "LDR     R0, [R1, #0x90] \n"
      "LDR     R1, [R1, #0x8C] \n"
      "BLX     R1 \n"
      "B       loc_FF8AF47C \n"
"loc_FF8AEEF8:\n"
      "CMP     R1, #0x29 \n"
      "BNE     loc_FF8AEF40 \n"
      "ADD     R1, SP, #0xC \n"
      "BL      sub_FF8AEDA4 \n"
      "LDR     R0, [R6, #0x1C] \n"
      "MOV     R1, #0x100 \n"
      "BL      sub_003FACA0 \n" //RAM
      "LDR     R0, =0xFF8AA720 \n"
      "MOV     R1, #0x100 \n"
      "BL      sub_FF955070 \n"
      "LDR     R0, [R6, #0x1C] \n"
      "MOV     R2, R7 \n"
      "MOV     R1, #0x100 \n"
      "BL      sub_003FABAC \n" //RAM
      "TST     R0, #1 \n"
      "BEQ     loc_FF8AEEE4 \n"
      "LDR     R1, =0x15A3 \n"
      "B       loc_FF8AEFB4 \n"
"loc_FF8AEF40:\n"
      "CMP     R1, #0x2A \n"
      "BNE     loc_FF8AEF58 \n"
"loc_FF8AEF48:\n"
      "LDR     R0, [SP, #0x28] \n"
      "ADD     R1, SP, #0xC \n"
      "BL      sub_FF8AEDA4 \n"
      "B       loc_FF8AEEE4 \n"
"loc_FF8AEF58:\n"
      "CMP     R1, #0x2D \n"
      "BNE     loc_FF8AEF70 \n"
      "BL      sub_FF89A9E4 \n"
      "BL      sub_FF89B6CC \n"
      "BL      sub_FF89B234 \n"
      "B       loc_FF8AEEE4 \n"
"loc_FF8AEF70:\n"
      "CMP     R1, #0x2E \n"
      "BNE     loc_FF8AEFC0 \n"
      "LDR     R0, [R6, #0x1C] \n"
      "MOV     R1, #4 \n"
      "BL      sub_003FACA0 \n" //RAM
      "LDR     R1, =0xFF8AA740 \n"
      "LDR     R0, =0xFFFFF400 \n"
      "MOV     R2, #4 \n"
      "BL      sub_FF89A434 \n"
      "BL      sub_FF89A6C4 \n"
      "LDR     R0, [R6, #0x1C] \n"
      "MOV     R2, R7 \n"
      "MOV     R1, #4 \n"
      "BL      sub_003FAAC8 \n" //RAM
      "TST     R0, #1 \n"
      "BEQ     loc_FF8AEEE4 \n"
      "LDR     R1, =0x15CB \n"
"loc_FF8AEFB4:\n"
      "LDR     R0, =0xFF8AAE34 \n" // "ExpDrv.c"
      "BL      _DebugAssert \n"
      "B       loc_FF8AEEE4 \n"
"loc_FF8AEFC0:\n"
      "LDR     R0, [SP, #0x28] \n"
      "MOV     R8, #1 \n"
      "LDR     R1, [R0] \n"
      "CMP     R1, #0x12 \n"
      "CMPNE   R1, #0x13 \n"
      "BNE     loc_FF8AF028 \n"
      "LDR     R1, [R0, #0x7C] \n"
      "ADD     R1, R1, R1, LSL #1 \n"
      "ADD     R1, R0, R1, LSL #2 \n"
      "SUB     R1, R1, #8 \n"
      "LDMIA   R1, {R2,R3,R9} \n"
      "STMIA   R5, {R2,R3,R9} \n"
      "BL      sub_FF8AD348 \n"
      "LDR     R0, [SP, #0x28] \n"
      "LDR     R1, [R0, #0x7C] \n"
      "LDR     R3, [R0, #0x8C] \n"
      "LDR     R2, [R0, #0x90] \n"
      "ADD     R0, R0, #4 \n"
      "BLX     R3 \n"
      "LDR     R0, [SP, #0x28] \n"
      "BL      sub_FF8B05D4 \n"
      "LDR     R0, [SP, #0x28] \n"
      "LDR     R1, [R0, #0x7C] \n"
      "LDR     R2, [R0, #0x98] \n"
      "LDR     R3, [R0, #0x94] \n"
      "B       loc_FF8AF340 \n"
"loc_FF8AF028:\n"
      "CMP     R1, #0x14 \n"
      "CMPNE   R1, #0x15 \n"
      "CMPNE   R1, #0x16 \n"
      "CMPNE   R1, #0x17 \n"
      "BNE     loc_FF8AF0E0 \n"
      "ADD     R3, SP, #0xC \n"
      "MOV     R2, SP \n"
      "ADD     R1, SP, #0x1C \n"
      "BL      sub_FF8AD5A8 \n"
      "CMP     R0, #1 \n"
      "MOV     R9, R0 \n"
      "CMPNE   R9, #5 \n"
      "BNE     loc_FF8AF07C \n"
      "LDR     R0, [SP, #0x28] \n"
      "MOV     R2, R9 \n"
      "LDR     R1, [R0, #0x7C]! \n"
      "LDR     R12, [R0, #0x10]! \n"
      "LDR     R3, [R0, #4] \n"
      "MOV     R0, SP \n"
      "BLX     R12 \n"
      "B       loc_FF8AF0B4 \n"
"loc_FF8AF07C:\n"
      "LDR     R0, [SP, #0x28] \n"
      "CMP     R9, #2 \n"
      "LDR     R3, [R0, #0x90] \n"
      "CMPNE   R9, #6 \n"
      "BNE     loc_FF8AF0C8 \n"
      "LDR     R12, [R0, #0x8C] \n"
      "MOV     R2, R9 \n"
      "MOV     R1, #1 \n"
      "MOV     R0, SP \n"
      "BLX     R12 \n"
      "LDR     R0, [SP, #0x28] \n"
      "MOV     R2, SP \n"
      "ADD     R1, SP, #0x1C \n"
      "BL      sub_FF8AEA90 \n"
"loc_FF8AF0B4:\n"
      "LDR     R0, [SP, #0x28] \n"
      "LDR     R2, [SP, #0xC] \n"
      "MOV     R1, R9 \n"
      "BL      sub_FF8AECE0 \n"
      "B       loc_FF8AF348 \n"
"loc_FF8AF0C8:\n"
      "LDR     R1, [R0, #0x7C] \n"
      "LDR     R12, [R0, #0x8C] \n"
      "MOV     R2, R9 \n"
      "ADD     R0, R0, #4 \n"
      "BLX     R12 \n"
      "B       loc_FF8AF348 \n"
"loc_FF8AF0E0:\n"
      "CMP     R1, #0x24 \n"
      "CMPNE   R1, #0x25 \n"
      "BNE     loc_FF8AF12C \n"
      "LDR     R1, [R0, #0x7C] \n"
      "ADD     R1, R1, R1, LSL #1 \n"
      "ADD     R1, R0, R1, LSL #2 \n"
      "SUB     R1, R1, #8 \n"
      "LDMIA   R1, {R2,R3,R9} \n"
      "STMIA   R5, {R2,R3,R9} \n"
      "BL      sub_FF8AC334 \n"
      "LDR     R0, [SP, #0x28] \n"
      "LDR     R1, [R0, #0x7C] \n"
      "LDR     R3, [R0, #0x8C] \n"
      "LDR     R2, [R0, #0x90] \n"
      "ADD     R0, R0, #4 \n"
      "BLX     R3 \n"
      "LDR     R0, [SP, #0x28] \n"
      "BL      sub_FF8AC774 \n"
      "B       loc_FF8AF348 \n"
"loc_FF8AF12C:\n"
      "ADD     R1, R0, #4 \n"
      "LDMIA   R1, {R2,R3,R9} \n"
      "STMIA   R5, {R2,R3,R9} \n"
      "LDR     R1, [R0] \n"
      "CMP     R1, #0x28 \n"
      "ADDCC   PC, PC, R1, LSL #2 \n"
      "B       loc_FF8AF330 \n"
      "B       loc_FF8AF1E8 \n" //(01)
      "B       loc_FF8AF1E8 \n" //(02)
      "B       loc_FF8AF1F0 \n" //(03)
      "B       loc_FF8AF1F8 \n" //(04)
      "B       loc_FF8AF1F8 \n" //(05)
      "B       loc_FF8AF1F8 \n" //(06)
      "B       loc_FF8AF1E8 \n" //(07)
      "B       loc_FF8AF1F0 \n" //(08)
      "B       loc_FF8AF1F8 \n" //(09)
      "B       loc_FF8AF1F8 \n" //(10)
      "B       loc_FF8AF210 \n" //(11)
      "B       loc_FF8AF210 \n" //(12)
      "B       loc_FF8AF31C \n" //(13)
      "B       loc_FF8AF324 \n" //(14)
      "B       loc_FF8AF324 \n" //(15)
      "B       loc_FF8AF324 \n" //(16)
      "B       loc_FF8AF324 \n" //(17)
      "B       loc_FF8AF32C \n" //(18)
      "B       loc_FF8AF330 \n" //(19)
      "B       loc_FF8AF330 \n" //(20)
      "B       loc_FF8AF330 \n" //(21)
      "B       loc_FF8AF330 \n" //(22)
      "B       loc_FF8AF330 \n" //(23)
      "B       loc_FF8AF330 \n" //(24)
      "B       loc_FF8AF200 \n" //(25)
      "B       loc_FF8AF208 \n" //(26)
      "B       loc_FF8AF208 \n" //(27)
      "B       loc_FF8AF208 \n" //(28)
      "B       loc_FF8AF21C \n" //(29)
      "B       loc_FF8AF21C \n" //(30)
      "B       loc_FF8AF224 \n" //(31)
      "B       loc_FF8AF25C \n" //(32)
      "B       loc_FF8AF294 \n" //(33)
      "B       loc_FF8AF2CC \n" //(34)
      "B       loc_FF8AF304 \n" //(35)
      "B       loc_FF8AF304 \n" //(36)
      "B       loc_FF8AF330 \n" //(37)
      "B       loc_FF8AF330 \n" //(38)
      "B       loc_FF8AF30C \n" //(39)
      "B       loc_FF8AF314 \n" //(40)
"loc_FF8AF1E8:\n" // jump table entries 01-02,07
      "BL      sub_FF8AACB8 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF1F0:\n"// jump table entry 03
      "BL      sub_FF8AAF5C \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF1F8:\n" // jump table entries 04-06,09-10
      "BL      sub_FF8AB184 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF200:\n" // jump table entries 25
      "BL      sub_FF8AB4A8 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF208:\n" // jump table entries 26-27
      "BL      sub_FF8AB6C0 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF210:\n" // jump table entries 11,12
//      "BL      sub_FF8ABA6C \n" //original
      "BL      sub_FF8ABA6C_my \n" //patched
      "MOV     R8, #0 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF21C:\n" // jump table entries 29,30
      "BL      sub_FF8ABBAC \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF224:\n" // jump table entry 31
      "LDRH    R1, [R0, #4] \n"
      "STRH    R1, [SP, #0x1C] \n"
      "LDRH    R1, [R4, #2] \n"
      "STRH    R1, [SP, #0x1E] \n"
      "LDRH    R1, [R4, #4] \n"
      "STRH    R1, [SP, #0x20] \n"
      "LDRH    R1, [R4, #6] \n"
      "STRH    R1, [SP, #0x22] \n"
      "LDRH    R1, [R0, #0xC] \n"
      "STRH    R1, [SP, #0x24] \n"
      "LDRH    R1, [R4, #0xA] \n"
      "STRH    R1, [SP, #0x26] \n"
      "BL      sub_FF8B0264 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF25C:\n" // jump table entry 32
      "LDRH    R1, [R0, #4] \n"
      "STRH    R1, [SP, #0x1C] \n"
      "LDRH    R1, [R4, #2] \n"
      "STRH    R1, [SP, #0x1E] \n"
      "LDRH    R1, [R4, #4] \n"
      "STRH    R1, [SP, #0x20] \n"
      "LDRH    R1, [R4, #6] \n"
      "STRH    R1, [SP, #0x22] \n"
      "LDRH    R1, [R4, #8] \n"
      "STRH    R1, [SP, #0x24] \n"
      "LDRH    R1, [R4, #0xA] \n"
      "STRH    R1, [SP, #0x26] \n"
      "BL      sub_FF8B03D4 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF294:\n" // jump table entry 33
      "LDRH    R1, [R4] \n"
      "STRH    R1, [SP, #0x1C] \n"
      "LDRH    R1, [R0, #6] \n"
      "STRH    R1, [SP, #0x1E] \n"
      "LDRH    R1, [R4, #4] \n"
      "STRH    R1, [SP, #0x20] \n"
      "LDRH    R1, [R4, #6] \n"
      "STRH    R1, [SP, #0x22] \n"
      "LDRH    R1, [R4, #8] \n"
      "STRH    R1, [SP, #0x24] \n"
      "LDRH    R1, [R4, #0xA] \n"
      "STRH    R1, [SP, #0x26] \n"
      "BL      sub_FF8B0488 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF2CC:\n" // jump table entry 34
      "LDRH    R1, [R4] \n"
      "STRH    R1, [SP, #0x1C] \n"
      "LDRH    R1, [R4, #2] \n"
      "STRH    R1, [SP, #0x1E] \n"
      "LDRH    R1, [R4, #4] \n"
      "STRH    R1, [SP, #0x20] \n"
      "LDRH    R1, [R4, #6] \n"
      "STRH    R1, [SP, #0x22] \n"
      "LDRH    R1, [R0, #0xC] \n"
      "STRH    R1, [SP, #0x24] \n"
      "LDRH    R1, [R4, #0xA] \n"
      "STRH    R1, [SP, #0x26] \n"
      "BL      sub_FF8B0530 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF304:\n" // jump table entries 35-36
      "BL      sub_FF8AC0E8 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF30C:\n" // jump table entry 39
      "BL      sub_FF8AC878 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF314:\n" // jump table entry 40
      "BL      sub_FF8ACB5C \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF31C:\n" // jump table entry 13
      "BL      sub_FF8ACE1C \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF324:\n"  // jump table entries 14-17
      "BL      sub_FF8ACFD8 \n"
      "B       loc_FF8AF330 \n"
"loc_FF8AF32C:\n" // jump table entry 18
      "BL      sub_FF8AD140 \n"
"loc_FF8AF330:\n" // jump table default entry
      "LDR     R0, [SP, #0x28] \n"
      "LDR     R1, [R0, #0x7C] \n"
      "LDR     R2, [R0, #0x90] \n"
      "LDR     R3, [R0, #0x8C] \n"
"loc_FF8AF340:\n"
      "ADD     R0, R0, #4 \n"
      "BLX     R3 \n"
"loc_FF8AF348:\n"
      "LDR     R0, [SP, #0x28] \n"
      "LDR     R0, [R0] \n"
      "CMP     R0, #0x10 \n"
      "BEQ     loc_FF8AF380 \n"
      "BGT     loc_FF8AF370 \n"
      "CMP     R0, #1 \n"
      "CMPNE   R0, #4 \n"
      "CMPNE   R0, #0xE \n"
      "BNE     loc_FF8AF3B4 \n"
      "B       loc_FF8AF380 \n"
"loc_FF8AF370:\n"
      "CMP     R0, #0x13 \n"
      "CMPNE   R0, #0x17 \n"
      "CMPNE   R0, #0x1A \n"
      "BNE     loc_FF8AF3B4 \n"
"loc_FF8AF380:\n"
      "LDRSH   R0, [R4] \n"
      "CMN     R0, #0xC00 \n"
      "LDRNESH R1, [R4, #8] \n"
      "CMNNE   R1, #0xC00 \n"
      "STRNEH  R0, [SP, #0x1C] \n"
      "STRNEH  R1, [SP, #0x24] \n"
      "BNE     loc_FF8AF3B4 \n"
      "ADD     R0, SP, #0x10 \n"
      "BL      sub_FF8B07E4 \n"
      "LDRH    R0, [SP, #0x10] \n"
      "STRH    R0, [SP, #0x1C] \n"
      "LDRH    R0, [SP, #0x18] \n"
      "STRH    R0, [SP, #0x24] \n"
"loc_FF8AF3B4:\n"
      "LDR     R0, [SP, #0x28] \n"
      "CMP     R8, #1 \n"
      "BNE     loc_FF8AF404 \n"
      "LDR     R1, [R0, #0x7C] \n"
      "MOV     R2, #0xC \n"
      "ADD     R1, R1, R1, LSL #1 \n"
      "ADD     R0, R0, R1, LSL #2 \n"
      "SUB     R8, R0, #8 \n"
      "LDR     R0, =0x55E1C \n"
      "ADD     R1, SP, #0x1C \n"
      "BL      sub_003FC17C \n"
      "LDR     R0, =0x55E28 \n"
      "MOV     R2, #0xC \n"
      "ADD     R1, SP, #0x1C \n"
      "BL      sub_003FC17C \n"
      "LDR     R0, =0x55E34 \n"
      "MOV     R2, #0xC \n"
      "MOV     R1, R8 \n"
      "BL      sub_003FC17C \n"
      "B       loc_FF8AF47C \n"
"loc_FF8AF404:\n"
      "LDR     R0, [R0] \n"
      "MOV     R3, #1 \n"
      "CMP     R0, #0xB \n"
      "BNE     loc_FF8AF448 \n"
      "MOV     R2, #0 \n"
      "STRD    R2, [SP] \n"
      "MOV     R2, R3 \n"
      "MOV     R1, R3 \n"
      "MOV     R0, #0 \n"
      "BL      sub_FF8AAA98 \n"
      "MOV     R3, #1 \n"
      "MOV     R2, #0 \n"
      "STRD    R2, [SP] \n"
      "MOV     R2, R3 \n"
      "MOV     R1, R3 \n"
      "MOV     R0, #0 \n"
      "B       loc_FF8AF478 \n"
"loc_FF8AF448:\n"
      "MOV     R2, #1 \n"
      "STRD    R2, [SP] \n"
      "MOV     R3, R2 \n"
      "MOV     R1, R2 \n"
      "MOV     R0, R2 \n"
      "BL      sub_FF8AAA98 \n"
      "MOV     R3, #1 \n"
      "MOV     R2, R3 \n"
      "MOV     R1, R3 \n"
      "MOV     R0, R3 \n"
      "STR     R3, [SP] \n"
      "STR     R3, [SP, #4] \n"
"loc_FF8AF478:\n"
      "BL      sub_FF8AAC04 \n"
"loc_FF8AF47C:\n"
      "LDR     R0, [SP, #0x28] \n"
      "BL      sub_FF8B01D0 \n"
      "B       loc_FF8AEE14 \n"
	);
}
//** sub_FF8ABA6C_my  @ 0xFF8ABA6C

void __attribute__((naked,noinline)) sub_FF8ABA6C_my() {
asm volatile (
      "STMFD   SP!, {R4-R8,LR} \n"
      "LDR     R7, =0x3DA0 \n"
      "MOV     R4, R0 \n"
      "LDR     R0, [R7, #0x1C] \n"
      "MOV     R1, #0x3E \n"
      "BL      sub_003FACA0 \n"
      "MOV     R2, #0 \n"
      "LDRSH   R0, [R4, #4] \n"
      "MOV     R1, R2 \n"
      "BL      sub_FF8AA7A0 \n"
      "MOV     R6, R0 \n"
      "LDRSH   R0, [R4, #6] \n"
      "BL      sub_FF8AA8F0 \n"
      "LDRSH   R0, [R4, #8] \n"
      "BL      sub_FF8AA948 \n"
      "LDRSH   R0, [R4, #0xA] \n"
      "BL      sub_FF8AA9A0 \n"
      "LDRSH   R0, [R4, #0xC] \n"
      "MOV     R1, #0 \n"
      "BL      sub_FF8AA9F8 \n"
      "MOV     R5, R0 \n"
      "LDR     R0, [R4] \n"
      "LDR     R8, =0x55E34 \n"
      "CMP     R0, #0xB \n"
      "MOVEQ   R6, #0 \n"
      "MOVEQ   R5, R6 \n"
      "BEQ     loc_FF8ABB00 \n"
      "CMP     R6, #1 \n"
      "BNE     loc_FF8ABB00 \n"
      "LDRSH   R0, [R4, #4] \n"
      "LDR     R1, =0xFF8AA700 \n"
      "MOV     R2, #2 \n"
      "BL      sub_FF954F54 \n"
      "STRH    R0, [R4, #4] \n"
      "MOV     R0, #0 \n"
      "STR     R0, [R7, #0x28] \n"
      "B       loc_FF8ABB08 \n"
"loc_FF8ABB00:\n"
      "LDRH    R0, [R8] \n"
      "STRH    R0, [R4, #4] \n"
"loc_FF8ABB08:\n"
      "CMP     R5, #1 \n"
      "LDRNEH  R0, [R8, #8] \n"
      "BNE     loc_FF8ABB24 \n"
      "LDRSH   R0, [R4, #0xC] \n"
      "LDR     R1, =0xFF8AA784 \n"
      "MOV     R2, #0x20 \n"
      "BL      sub_FF8B0220 \n"
"loc_FF8ABB24:\n"
      "STRH    R0, [R4, #0xC] \n"
      "LDRSH   R0, [R4, #6] \n"
//      "BL      sub_FF89A730 \n" // original
      "BL      sub_FF89A730_my \n" //patched
      "B sub_FF8ABB30 \n" // continue in firmware
 	);
}

//** sub_FF89A730_my  @ 0xFF89A730 

void __attribute__((naked,noinline)) sub_FF89A730_my() {
asm volatile (
      "STMFD   SP!, {R4-R6,LR} \n"
      "LDR     R5, =0x39F0 \n"
      "MOV     R4, R0 \n"
      "LDR     R0, [R5, #4] \n"
      "CMP     R0, #1 \n"
      "LDRNE   R1, =0x14D \n"
      "LDRNE   R0, =0xFF89A568 \n" //  ; "Shutter.c"
      "BLNE    _DebugAssert \n"
      "CMN     R4, #0xC00 \n"
      "LDREQSH R4, [R5, #2] \n"
      "CMN     R4, #0xC00 \n"
      "LDREQ   R1, =0x153 \n"
      "LDREQ   R0, =0xFF89A568 \n" //  ; "Shutter.c"
      "STRH    R4, [R5, #2] \n"
      "BLEQ    _DebugAssert \n"
      "MOV     R0, R4 \n"
//      "BL      _apex2us \n"   //original _apex2us
      "BL      apex2us \n"   //patched function
      "MOV     R4, R0 \n"
      "BL      sub_FF8E9AB0 \n"
      "MOV     R0, R4 \n"
      "BL      sub_FF8F22B8 \n"
      "TST     R0, #1 \n"
      "LDMEQFD SP!, {R4-R6,PC} \n"
      "LDMFD   SP!, {R4-R6,LR} \n"
      "MOV     R1, #0x158 \n"
      "LDR     R0, =0xFF89A568 \n" //  ; "Shutter.c"
      "B       _DebugAssert \n"
	);
}
